[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Open Source Software Development: A socio-technical course",
    "section": "",
    "text": "Welcome to the materials for a course on open source software development, taught at the School of Information at the University of Texas at Austin. The course is taught by James Howison, with contributions from a set of wonderful TAs, including Chongyan Chen.\nThe course was developed as an undergraduate version of a course on Peer Production: Open Source, Wikipedia, and Beyond.\nI call this a “socio-technical course” because I interleave social theory about open source (such as theories of motivation, approaches to governance, sources of lack of diversity) in among the technical skills needed to participate in open source projects (git and github commands, markdown, unit testing, packaging). This interleaving is inspired equally by Karl Fogel’s approach in Producing Open Source Software, and the intellectual traditions of Sociotechnical Systems, Sociomateriality, and the Consortium for the Science of Sociotechnical Systems (CSST).\nIn these materials I present these in two separate sequences: “insights” and “skills”. When I teach, though, I interleave them in what I hope are synergistic ways. For example, when teaching about coordination theory, the week includes the git and github approaches to managing dependencies (such as identifying and resolving conflicts, as well as branching). I pair literature on knowledge sharing up with skills to do it, such as understanding Markdown and referring to Issues/Commits. You can see this interleaving in the most recent syllabus at Section 2.1.\nThe course begins with a two-part physical in-class exercise: students fold paper planes, and share improvements. The first exercise addresses how patents and copyright affect sharing, building on each others work, and the division of claims. The second takes a more technical tack, and addresses management of versions and conflicts. These exercises give a physical analog for the topics in the course, giving a grounding for discussing intellectual concepts and git commands."
  },
  {
    "objectID": "oss_syllabus.html",
    "href": "oss_syllabus.html",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "",
    "text": "3 Objectives and Assignments\nThis course explores “open source software development” which is a name for the open collaborations that produce open source software. Open source software is a thing that is built by people, an artifact. But the way that it is developed, the way that people work together to build it is of great interest. “The open source way” is of practical interest for everyone building software, because open source development has lead the creation of ways of working used throughout software work. For social and organizational scholars, “the open source way” is of inte3rest in advancing our theories of how people can work together and how technology matters.\nThe “open source way” is also known as “peer production” and that way of working extends beyond open source, to places like Wikipedia. Perhaps not coincidentally the Wikipedia page on Peer Production is quite useful:\nAs we learn about open source and peer production we’ll learn to distinguish it from different kinds of online collaborations, such as crowdsourcing, citizen science, question and answer sites, and mere sharing of code. Near synonyms for the way of working taught in this course are: “The open source way”, “Open collaboration”, “Open mass production”.\nThis is a course is about a sociotechnical phenomenon and it takes a sociotechnical approach. In practice this means that we’ll be learning both conceptual insight and practical skills. The course weaves together learning how to use key technologies of collaboration (e.g., git, github, travisCI, markdown) at the same time that we learn social and organizational theory about peer production (e.g., the role of copyright licenses, motivations of participants, governance models, coordination theory, models of collaboration risk, cultures of collaboration).\nThere are no prereqs for this course. While we will be discussing software development students will not be required to program. We will use the command line as we learn to use git and github everything will be covered in class. I try to build a set of analogies for git and github, going beyond teaching the commands to give ways to think about git.\nStudents will need access to a computer for classes, any version of Windows, Mac, or Linux will do. Students facing difficulties with their IT should contact the iSchool help desk (via help@ischool.utexas.edu) who can refer on to other resources as available."
  },
  {
    "objectID": "oss_syllabus.html#sec-syllabus",
    "href": "oss_syllabus.html#sec-syllabus",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "2.1 Syllabus",
    "text": "2.1 Syllabus\nOfficial, updated version of syllabus always online at:\nhttps://howisonlab.github.io/open_source_software_course/oss_syllabus.html\nClass server at Edupod Rstudio.\n\n\n\n\n\nCourse\nI 320D Topics in Human-Centered Data Science : Open Source Software Development\n\n\n\n\nProfessor\nJames Howison\n\n\nMeeting Time\nMondays and Wednesdays 9:30-10:45\n\n\nLocation\nSZB 5.414\n\n\nSemester\nSpring 2023\n\n\nUnique No.\n28120\n\n\nOffice Hours\nWed 3-4pm via Zoom at https://utexas.zoom.com/my/howisonlab Contact via Canvas email if not in room\n\n\nContact Email\njhowison@ischool.utexas.edu"
  },
  {
    "objectID": "oss_syllabus.html#learning-objectives",
    "href": "oss_syllabus.html#learning-objectives",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "3.1 Learning Objectives",
    "text": "3.1 Learning Objectives\nStudents will be able to:\n\nUnderstand what open source software is as an artifact\nUnderstand what is distinctive about the way that it is produced\nKnow how to interact with open source software projects\nKnow how the open source way has informed modern software development work (including in data science)\nConceptually distinguish open source from other organizational forms or phenomena, such as corporations, crowdsourcing, open access publishing, and communities of practice.\nReason about how, why, and when open source peer production works (and when it does not!)\nEngage critically with published research and popular discourse about open source\n\nPractically students will be able to:\n\nInstall and use git to manage versions in their own work\nParticipate in github hosted peer production (making and receiving pull requests)\nCreate and publish documents in markdown and wikitext format\nAsk technical questions that people want to answer\nAnalyze trace data from open source software projects"
  },
  {
    "objectID": "oss_syllabus.html#assessments",
    "href": "oss_syllabus.html#assessments",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "3.2 Assessments",
    "text": "3.2 Assessments\n\n\n\n\n\nAssignment\nPercentage of Course Grade\nDue Date\n\n\n\n\nClass Participation (discussion and activites)\n10%\nThroughout course\n\n\nTechnical challenges\n40%\nWeekly homework challenges\n\n\nOpen source comparison paper\n20%\nStart of Spring Break\n\n\nOpen Source Trace Data analysis Project report\n25%\nPrior to Presentations\n\n\nProject presentation\n5%\nPresentations\n\n\n\n\n\n\n\nThere is no final exam for this course. 100-90:A, 90 &gt; grade &gt; 85: A-, 85 &gt; grade &gt; 80 B- and so on.\n\n3.2.1 Participation in class discussion and activities\nStudents are expected to attend class and to participate in discussion and activities. Students should email the professor prior to class if they cannot make it. Material throughout the course builds on earlier material (both technical and conceptual). If you cannot make class you should refer to the online materials first and then consult with your classmates. Office hours are not for personal replays of teaching, nor can they compensate for not participating in discussion.\nHints on participation:\n\nUseful participation can come from asking questions if you don’t understand the point someone is making. If you have questions, very likely others do to.\nYou can also summarize discussion which helps everyone by giving them something to test their understanding of the discussion.\nYou can challenge or disagree with people, sometimes that can be introducing a counter-example or questioning whether evidence really means what the speaker originally thought.\nI really welcome examples from your own experience. For example if there is an organization, movement, or line of thought (modern/traditional) in your culture that relates to open source development, I would love that to be part of the discussion.\n\n\n\n3.2.2 Technical Challenges\nThe course will have assignments based on the technical topics we are learning, including use of the DataCamp course (see below).\n\n\n3.2.3 Open Source comparison paper\nFor this assignment students will write a 1,000 word scholarly essay describing and analyzing efforts to adapt the “open source way” outside of software development. Students will be given a list of five projects they need to research and analyze to compare to “the open source way”. Examples could include open hardware, open governance, open culture. The paper should draw on the conceptual literature to compare and contrast the challenge faced by these adaptation efforts to what we’ve learned about “the open source way”. The paper will also describe the collaboration infrastructure used and compare it to the technologies we have learned in class).\nThe paper will be authored in Plain Text or Markdown and submitted via a pull request to the class github. Include your name in the filename and at the top of the document, and include a note at the top of the file telling me which formal citation approach you are using (e.g., APA, MLA, etc). Students are cautioned that as a scholarly paper proper citation and use of sources is required otherwise students will face academic misconduct proceedings. See “Academic Integrity” presentation if at all unsure.\n\n\n3.2.4 Open Source Trace Data analysis Project\nStudents will be introduced to datasets of archives of activity in open source projects and develop their own analysis. For example, students might want to highlight those participants that are most active over time in a project, show whether leadership has changed within projects, or analyze license usage over time.\nThere are three graded components, each to be submitted via a pull request. All components should reference the insight readings that we do throughout the course.\n\nIdentifying and describing a project. ~500 words. Authored in plain text or markdown (ensure file is encoded with Unicode UTF-8 encoding and Unix/LF-only line endings). This paper should clearly identify the intended analysis and argue for its relevance, including using literature to identify expectations. Include your name in the filename and at the top of the document, and include a note at the top of the file telling me which formal citation approach you are using (e.g., APA, MLA, etc).\nImplementing the analysis and report. ~500-1000 words, authored in RMarkdown, using the citation features. Students should describe the dataset, their analysis (possibly including graphs), and their interpretation. Students should compare their experience with their expectations described in the first paper and use at least two references from our conceptual literature to justify their inquiry. Create a folder in assignment_submission/trace_data_project/your_name and all files in that folder. Submit via a pull request from a branch created just for this submission (i.e., not master), and post that URL to the Canvas assignment, ensure this is a separate PR from your slide submission (below).\nCreating and giving a presentation on their participation. Presentations are limited to 5 minutes, this should be approx 4-6 slides long and be authored using Markdown that produces slides. Presentations will occur in our final class meeting. Submit via a pull request from a branch created just for this submission (ie not master), and post that URL to the Canvas assignment."
  },
  {
    "objectID": "oss_syllabus.html#materials",
    "href": "oss_syllabus.html#materials",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "3.3 Materials",
    "text": "3.3 Materials\nThere are no required texts for this course and no materials to purchase.\nReadings, tutorials, and will be provided via pages linked from the class calendar below.\nI will enroll the class in DataCamp, giving students free access to the DataCamp courses (including their premium courses). In particular we will be using their interactive course on git during classes in the first half of the course. I encourage students to explore their other course options during the semester."
  },
  {
    "objectID": "oss_syllabus.html#draft-course-schedule",
    "href": "oss_syllabus.html#draft-course-schedule",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "4.1 Draft Course Schedule",
    "text": "4.1 Draft Course Schedule\nTable below shows classes and topics planned. Each class has both an insight (aka theory, conceptual) and a skills (aka tech, practical) component. These will become links to materials for the class.\n\n\n\n\n\n\n\n\nFirst Class\n\n\n\n\nSecond Class\n\n\n\n\n\nWeek\n\n\nDay\n\n\nModule\n\n\nTopic\n\n\nDay\n\n\nModule\n\n\nTopic\n\n\n\n\n\n\n1\n\n\nMon Jan 09\n\n\nIntroduction\n\n\nSyllabus Review\n\n\nWed Jan 11\n\n\nIntroduction\n\n\nPaper Planes: Innovation and collaboration\n\n\n\n\n2\n\n\nMon Jan 16\n\n\nNo Meeting\n\n\nNo meeting: MLK day\n\n\nWed Jan 18\n\n\nSkills\n\n\nPaper Planes: Version Controlgit add, commit via paper planes and tables\n\n\n\n\n3\n\n\nMon Jan 23\n\n\nInsights\n\n\nWhat is open source? Chapter 3\n\n\nWed Jan 25\n\n\nSkills\n\n\nGit basic workflow Chapter 9 git add, commit (locally)\n\n\n\n\n4\n\n\nMon Jan 30\n\n\nInsights\n\n\nMotivations and Asking questions people want to answer Chapter 4\n\n\nWed Feb 01\n\n\nNo Meeting\n\n\nNo meeting: Ice Storm\n\n\n\n\n5\n\n\nMon Feb 06\n\n\nInsights\n\n\nLicenses Chapter 5\n\n\nWed Feb 08\n\n\nSkills\n\n\nRewinding work Chapter 10 revert, other undos, checking out old versions, rewriting history\n\n\n\n\n6\n\n\nMon Feb 13\n\n\nInsights\n\n\nCoordination Chapter 6\n\n\nWed Feb 15\n\n\nSkills\n\n\nBranching Chapter 11 git checkout, merge.\n\n\n\n\n7\n\n\nMon Feb 20\n\n\nNo Meeting\n\n\nNo meeting: Instructor Travel\n\n\nWed Feb 22\n\n\nSkills\n\n\nSharing and collaborating via github Chapter 12 Chapter 13 github fork, git clone, push, pull request, pull upstream\n\n\n\n\n8\n\n\nMon Feb 27\n\n\nInsights\n\n\nGovernance and decision making Chapter 7\n\n\nWed Mar 01\n\n\nSkills\n\n\nCollaboration conflicts and workflows Chapter 13 merge, conflicts, mark resolved, collaboration workflows, git rebase\n\n\n\n\n9\n\n\nMon Mar 06\n\n\nInsights\n\n\nKnowledge sharing\n\n\nWed Mar 08\n\n\nSkills\n\n\nDocumentation and Q&Agithub flavored markdown\n\n\n\n\n10\n\n\nMon Mar 13\n\n\nNo Meeting\n\n\nNo meeting: Spring Break\n\n\nWed Mar 15\n\n\nNo Meeting\n\n\nNo meeting: Spring Break\n\n\n\n\n11\n\n\nMon Mar 20\n\n\nInsights\n\n\nBias and lack of diversity Chapter 8\n\n\nWed Mar 22\n\n\nSkills\n\n\nUnit TestsTest suites\n\n\n\n\n12\n\n\nMon Mar 27\n\n\nInsights\n\n\nAgile and test driven development\n\n\nWed Mar 29\n\n\nSkills\n\n\nContinuous IntegrationTravis CI integration, Github Actions\n\n\n\n\n13\n\n\nMon Apr 03\n\n\nInsights\n\n\nThe stack and the stream\n\n\nWed Apr 05\n\n\nSkills\n\n\nRelease managementgithub releases, git tag\n\n\n\n\n14\n\n\nMon Apr 10\n\n\nInsights\n\n\nCybersecurity and open source\n\n\nWed Apr 12\n\n\nSkills\n\n\nCreating and distributing packagespython packages, pypy pinning\n\n\n\n\n15\n\n\nMon Apr 17\n\n\nPresentations\n\n\nPresentations\n\n\nWed Apr 19\n\n\nPresentations\n\n\nPresentations"
  },
  {
    "objectID": "oss_syllabus.html#skills-readings",
    "href": "oss_syllabus.html#skills-readings",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "4.2 Skills Readings",
    "text": "4.2 Skills Readings"
  },
  {
    "objectID": "oss_syllabus.html#insight-readings",
    "href": "oss_syllabus.html#insight-readings",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "4.3 Insight Readings",
    "text": "4.3 Insight Readings\nOften I can link directly to websites or PDFs, but sometimes I will provide links to articles in journals etc. You must be able to get the article through the library, generally speaking using the web VPN is the most convenient approach. Another option that can sometimes work is UnPaywall which works to find an open access article version when looking at a publisher’s page for the article."
  },
  {
    "objectID": "oss_syllabus.html#class-recordings",
    "href": "oss_syllabus.html#class-recordings",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.1 Class Recordings",
    "text": "5.1 Class Recordings\nClass Recordings: Class recordings are reserved only for students in this class for educational purposes and are protected under FERPA. The recordings should not be shared outside the class in any form. Violation of this restriction by a student could lead to Student Misconduct proceedings. Guidance on public access to class recordings can be found here."
  },
  {
    "objectID": "oss_syllabus.html#academic-integrity",
    "href": "oss_syllabus.html#academic-integrity",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.2 Academic Integrity",
    "text": "5.2 Academic Integrity\nEach student in the course is expected to abide by the University of Texas Honor Code: “As a student of The University of Texas at Austin, I shall abide by the core values of the University and uphold academic integrity.” Plagiarism is taken very seriously at UT. Therefore, if you use words or ideas that are not your own (or that you have used in previous class), you must cite your sources. Otherwise you will be guilty of plagiarism and subject to academic disciplinary action, including failure of the course. In particular, students are reminded that proper citation requires mentioning sources when you use them, not just in a general list of references at the end of a document. You are responsible for understanding UT’s Academic Honesty and the University Honor Code which can be found at the following web address: http://deanofstudents.utexas.edu/sjs/acint_student.php"
  },
  {
    "objectID": "oss_syllabus.html#student-rights-and-responsibilities",
    "href": "oss_syllabus.html#student-rights-and-responsibilities",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.3 Student rights and responsibilities",
    "text": "5.3 Student rights and responsibilities\n\nYou have a right to a learning environment that supports mental and physical wellness.\nYou have a right to respect.\nYou have a right to be assessed and graded fairly.\nYou have a right to freedom of opinion and expression.\nYou have a right to privacy and confidentiality.\nYou have a right to meaningful and equal participation, and to self-organize groups to improve your learning environment.\nYou have a right to learn in an environment that is welcoming to all people. No student shall be isolated, excluded or diminished in any way.\n\nWith these rights come responsibilities:\n\nYou are responsible for taking care of yourself, managing your time, and communicating with the teaching team and with others if things start to feel out of control or overwhelming.\nYou are responsible for acting in a way that is worthy of respect and always respectful of others.\nYour experience with this course is directly related to the quality of the energy that you bring to it, and your energy shapes the quality of your peers’ experiences.\nYou are responsible for creating an inclusive environment and for speaking up when someone is excluded. In particular, you are responsible for ensuring that your participation does not exclude the participation of others. Office hours are available for in-depth further discussion of advanced topics or other interests that pursuing in depth during class would exclude others.\nYou are responsible for holding yourself accountable to these standards, holding each other to these standards, and holding the teaching team accountable as well."
  },
  {
    "objectID": "oss_syllabus.html#personal-pronoun-preference",
    "href": "oss_syllabus.html#personal-pronoun-preference",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.4 Personal Pronoun Preference",
    "text": "5.4 Personal Pronoun Preference\nProfessional courtesy and sensitivity are especially important with respect to individuals and topics dealing with differences of race, culture, religion, politics, sexual orientation, gender, gender variance, and nationalities. Class rosters are provided to the instructor with the student’s legal name. I will gladly honor your request to address you by an alternate name or gender pronoun. Please advise me of this preference early in the semester so that I may make appropriate changes to my records."
  },
  {
    "objectID": "oss_syllabus.html#drop-policy",
    "href": "oss_syllabus.html#drop-policy",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.5 Drop Policy",
    "text": "5.5 Drop Policy\nIf you want to drop a class after the 12th class day, you’ll need to execute a Q drop before the Q-drop deadline, which typically occurs near the middle of the semester. Under Texas law, you are only allowed six Q drops while you are in college at any public Texas institution. For more information, see: http://www.utexas.edu/ugs/csacc/academic/adddrop/qdrop\nInternational students must meet with the international office before dropping a class that would put them below full-time status. Although it is worth noting that there are legitimate reasons that allow International students to be below full-time status, so if you think you are failing a course (or just performing below your expectations) don’t make assumptions either way, speak with the international office to discover your options."
  },
  {
    "objectID": "oss_syllabus.html#university-resources-for-students",
    "href": "oss_syllabus.html#university-resources-for-students",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.6 University Resources for Students",
    "text": "5.6 University Resources for Students\nYour success in this class is important to me. We will all need accommodations at different times because we all learn differently. If there are aspects of this course that prevent you from learning or exclude you, please let me know as soon as possible. Together we’ll develop strategies to meet both your needs and the requirements of the course. There are also a range of resources on campus, detailed below.\n\n5.6.1 Accessible/Compliant Statement:\nIf you are a student with a disability, or think you may have a disability, and need accommodations please contact Disability and Access (D&A). You may refer to D&A’s website for contact and more information: http://diversity.utexas.edu/disability/. If you are already registered with D&A, please deliver your Accommodation Letter to me as early as possible in the semester so we can discuss your approved accommodations.\n\n\n5.6.2 Accessible, Inclusive, and Compliant Statement:\nThe university is committed to creating an accessible and inclusive learning environment consistent with university policy and federal and state law. Please let me know if you experience any barriers to learning so I can work with you to ensure you have equal opportunity to participate fully in this course. If you are a student with a disability, or think you may have a disability, and need accommodations please contact Disability and Access (D&A). Please refer to D&A’s website for contact and more information: http://diversity.utexas.edu/disability/. If you are already registered with D&A , please deliver your Accommodation Letter to me as early as possible in the semester so we can discuss your approved accommodations and needs in this course.\n\n\n5.6.3 Counseling and Mental Health Center\nAll of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful.\nIf you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. http://www.cmhc.utexas.edu/individualcounseling.html\n\n\n5.6.4 The Sanger Learning Center\nAll students, including graduate students, are welcome to take advantage of Sanger Center’s classes and workshops, private learning specialist appointments, peer academic coaching, and tutoring for more than 70 courses in 15 different subject areas. For more information, please visit https://ugs.utexas.edu/slc/grad or call 512-471-3614 (JES A332).\n\n\n5.6.5 University Writing Center free programs for grad students\n\n\n5.6.6 Libraries\n\n\n5.6.7 IT services\n\n\n5.6.8 Student Emergency Services\n\n\n5.6.9 Important Safety Information\nIf you have concerns about the safety or behavior of fellow students, TAs or Professors, call BCAL (the Behavior Concerns Advice Line): 512-232-5050. Your call can be anonymous. If something doesn’t feel right—it probably isn’t. Trust your instincts and share your concerns.\nThe following recommendations regarding emergency evacuation from the Office of Campus Safety and Security, 512-471-5767, http://www.utexas.edu/safety/\nOccupants of buildings on The University of Texas at Austin campus are required to evacuate buildings when a fire alarm is activated. Alarm activation or announcement requires exiting and assembling outside.\n\nFamiliarize yourself with all exit doors of each classroom and building you may occupy. Remember that the nearest exit door may not be the one you used when entering the building.\nStudents requiring assistance in evacuation shall inform their instructor in writing during the first week of class.\nIn the event of an evacuation, follow the instruction of faculty or class instructors. Do not re-enter a building unless given instructions by the following: Austin Fire Department, The University of Texas at Austin Police Department, or Fire Prevention Services office.\nLink to information regarding emergency evacuation routes and emergency procedures can be found at: http://www.utexas.edu/emergency"
  },
  {
    "objectID": "insights/what_is_open_source.html#readings-prior-to-class",
    "href": "insights/what_is_open_source.html#readings-prior-to-class",
    "title": "3  Introduction: What is open source?",
    "section": "3.1 Readings prior to class:",
    "text": "3.1 Readings prior to class:\n\nNadia Eghbal. (2020, December 3). The Making and Maintenance of our Open Source Infrastructure | Nadia Eghbal. https://www.youtube.com/watch?v=5wLKnN3To-k?start=2:00. Watch through ~8:00m.\nRichard Stallman. (2001, May 29). Richard M. Stallman’s speech: “Free Software: Freedom and Cooperation” [Speech Transcript]. https://www.gnu.org/philosophy/rms-nyu-2001-transcript.txt\nVICE (Director). (2020, March 3). Farmers Are Hacking Their Tractors Because of a Repair Ban. https://www.youtube.com/watch?v=EPYy_g8NzmI"
  },
  {
    "objectID": "insights/what_is_open_source.html#where-is-open-source",
    "href": "insights/what_is_open_source.html#where-is-open-source",
    "title": "3  Introduction: What is open source?",
    "section": "3.2 Where is open source?",
    "text": "3.2 Where is open source?\nOpen source is everywhere.\nFamous pieces of open source software:\n\nFirefox browser\nZotero reference manager\nThe pandas data manipulation framework\n\nOften it is fairly hidden from end users. This can be because it is running on servers (and not installed by end-users), such as\n\nApache httpd\npostman\n\nSometimes it is just underneath a proprietary layer, such as\n\nChromium (underlies Chrome)\nVS Codium (underlies Microsoft’s VS Code)\n\nOften it is well ‘below the surface’ deeper in the dependencies.\n\nWindows (many, many components, famously the internet stack)\nMacOS (Darwin kernel)\nTableau (many components, see https://www.tableau.com/blog/tableau-and-open-source-advantage)\nSnowflake (Apache Arrow)\n\nOpen source is everywhere:\n\nLaptops\nPhones\nServers\nInternet routers (email, BGP)\nWifi routers\nCars, Radios, Watches, Batteries\n\nhttps://thenewstack.io/the-open-source-lesson-of-the-linksys-wrt54g-router/\n\nDatascience software.\n\nhttps://posit.co/products/open-source/rstudio/ https://jupyter.org/governance/projectlicense.html"
  },
  {
    "objectID": "insights/what_is_open_source.html#why-open-source",
    "href": "insights/what_is_open_source.html#why-open-source",
    "title": "3  Introduction: What is open source?",
    "section": "3.3 Why open source?",
    "text": "3.3 Why open source?\n\n3.3.1 For the right to repair\nThe readings focused on this, highlighting current challenges in repair. You read about farmers who purchase John Deere farm equipment. Many want to be able to work on their equipment on their own, right on the farm. This is both because they are at a great distance from dealers, the equipment is expensive to transport, and they have paid a lot for the equipment and object to paying more to keep it working.\nIn many ways this is the same situation that Richard Stallman (found of the Free Software Foundation) faced when dealing with the printer in his office. This is one of the foundational stories of the free software movement.\nHave you faced issues in trying to repair something? What prevented you?\nDiscussion: what is needed to repair a blender? A car? A list sorting algorithm? A web-page?\nWhat role does source code play? What else is needed?\n\n\n3.3.2 To avoid “proprietary lock in”\nThe popularity of open source can be understand as a kind of software escrow. Producers of tools want their users to rely on the tool, but if the code is hidden then a user is taking on a significant risk. That is is that the software stops getting updated because the company disappears. This means that maintenance stops, which means that the code suffers “bit rot” or “code collapse”.\n“Code collapse” occurs when software is not maintained. Not only do new features not appear, but security holes can be discovered which cannot be fixed. More subtly the code gets out of sync with its ecosystem, so that the way it talks to other software might stop working as other software is updated. If something changes in the software requirements (e.g., a change in the tax code) then the software cannot be updated.\nSo the buyer of proprietary software want an assurance that the software will continue to be updated, but no firm can assure its customers that it will be around for ever. To solve this purchasers used an approach called “Software Escrow”. Escrow means using a 3rd party (not the firm buying the software and not the firm building the software) to keep a copy of the software delivered. That escrow agent keeps that code secret unless specific events occurs, such as the software producer going out of business or discontinuing the product. In those cases the firm buying the code gets the source (and a license to use it). Escrow is a sort of insurance policy to help make relying on other people less risky.\nOpen source shares some of these characteristics. When building on someone else’s code, knowing it is open source means that the user can be sure they can taken over maintenance, even if the original developers stop working on the project.\n\n\n3.3.3 Shared maintenance of infrastructure\nWhen organizations compete with each other they want you to purchase their product, and not the product of their competitor. To purchase “Extra” brand chewing gum, and not “Trident” brand.\nYet much of the effort that goes into producing a product is spent on things that are not directly related to the product they are selling. Think of things like the supply of office furniture, the repainting of lines in the parking lot. These sort of efforts are known as “infrastructure”.\nIn many cases infrastructure is purchased from other companies, known as “contracting” or “out-sourcing”. The general logic is that companies that specialize in office furniture will do a better and cheaper job than if the chewing gum company was to make (or even buy) its own furniture. For example, Economics of scale mean that the outsourced furniture company can get bulk purchase discounts and pass them on to customers. They can also have full time people focused on monitoring safety issues with furniture and be responsible for fixing or replacing chairs that might injure people, saving the chewing gum company from lawsuits for dangerous chairs.\nMany users of open source are using open source software in the same way. For example IBM had a product called “WebSphere” which they sold to firms to run their “intranet” (internal corporate network publishing information or managing business processes). IBM originally wrote and maintained their own web server (as well as the application software that ran on top of it). Eventually, though, they changed to using the open source web server called Apache httpd. They argued that this saved them a lot of time maintaining their own infrastructure internally.\nIBM even started contributing changes that it needed or were helpful to their product back to httpd. They could have kept those changes secret, but then they would just have more infrastructure to maintain. Instead, they reasoned, they would contribute those changes back to httpd, effectively giving that work to their competitors (and everyone), but in return they received a lot more eyeballs on that code, ensuring that it was better tested and kept in sync.\nThey shared the cost of maintenance on the infrastructure to concentrate effort on their “secret sauce” of the WebSphere application layer, which was the thing that customers were really buying from them.\n\n\n3.3.4 The smartest people don’t work for you\nEach firm competes to hire great people. Yet it is unreasonable to think that you will have all the best people in the world working at your organization. For this reason firms seek to access outside intelligence. Sometimes this is possible through outsourcing, but other times problems are quite specific and require engagement with information or requirements that are quite specific to the business.\nBill Joy (from Sun Microsystems)is credited with the saying,\n\n“no matter who you are, most of the smartest people work for someone else,\n\nFirms therefore wna to access those smart people. Various approachs help, including “Crowdsourcing,” “innovation contests,” and “thought leadership” (publishing white papers and blogs that are discussed in public and then watching the discussion).\nOpen source projects are another place where expert outsiders can be found and engaged on topics of importance to firms."
  },
  {
    "objectID": "insights/what_is_open_source.html#why-is-open-source-interesting",
    "href": "insights/what_is_open_source.html#why-is-open-source-interesting",
    "title": "3  Introduction: What is open source?",
    "section": "3.4 Why is open source interesting?",
    "text": "3.4 Why is open source interesting?\nOpen source is interesting to a wide group of thinkers, both academics and thinkers in business and software.\n\nOpen source is successful. Almost all software has a foundation of open source, and open source tools successfully compete with proprietary software.\nThat success is unexpected. Why “give it away”, why “work for free”?\nOpen source (and Free Software) are politically engaged, holding the belief that they can changed the world through openness and freedom. Those building openly find this an emancipatory experience that they want to share with others (see Dunbar-Hestor’s “Hacking Diversity” book)\nOpen source is the leading edge of distributed work. Open source is done online, with participants that often don’t know each other and are all around the world. All the issues of remote work were encountered first in open source, which has developed interesting approaches to these problems."
  },
  {
    "objectID": "insights/what_is_open_source.html#topics-to-be-covered",
    "href": "insights/what_is_open_source.html#topics-to-be-covered",
    "title": "3  Introduction: What is open source?",
    "section": "3.5 Topics to be covered",
    "text": "3.5 Topics to be covered\n\nMotivations for participation\nLicences\nCoordination\nGovernance\nBias and lack of diversity\nSoftware collapse, packaging and dependencies\nContinuous Integration"
  },
  {
    "objectID": "insights/motivations.html#how-to-ask-questions-people-want-to-answer",
    "href": "insights/motivations.html#how-to-ask-questions-people-want-to-answer",
    "title": "4  Motivations",
    "section": "4.1 How to ask questions people want to answer",
    "text": "4.1 How to ask questions people want to answer\nMuch of this material is based on How To Ask Questions The Smart Way, Eric Raymond and Rick Moen with the addition of academic references and frameworks.\nOpen source projects are famous for having direct access to very knowledgeable people about the source code. Unlike when you purchase software, you can very likely get questions in front of some of the people that wrote the underlying code.\nBut ask yourself why they are there, reading and answering user questions. What drives them, what motivates them?\n\n4.1.1 RTFM\nThere is always a risk that a poorly asked question will be met with this response:\n\n\n\nRTFM Mug by Gubatron (CC-licensed http://www.flickr.com/photos/gubatron/3102412751)\n\n\nRTFM means to “Read the F***ing Manual” (which I’ll read as Read the Fine Manual). This rather unfriendly, and indeed unwelcoming response can occur when a question is asked in a way that doesn’t understand what it is that motivates people to participate in online support forums for software.\n\nI note that open communities are not necessarily welcoming places. In fact they can be quite aggressive, even toxic. It is perhaps not unrelated that open communities are also no diverse. We will discuss this later in the course when we consider Bias and Lack of Diversity in @bias-and-lack-of-diversity\n\nLakhani and von Hippel (2003) studied the Apache httpd mailing list. They mailed a survey link to participants the first time they saw them post to the list, only mailing each person once. They received responses from 28.9% of info providers, and 16.6% info seekers.\nThey report that :\n\nspending time in the forum had excellent ROI (return on investment) for information seekers (Seekers saved 9 minutes for every 1 minute spent writing questions).\nProviders answer questions that are easy for them, rarely do they seek out additional information to help answer.\nInformation Providers invest a lot of time in the forum, average of 80 hours a year.\nKey motivations to answer were reciprocity and reputation within Apache (not career prospects)\nBut information providers are primarily there to learn (&gt;90% of time spent reading, not answering).\n\nSo, very knowledgeable people answer people’s questions when it is easy for them to do so (not spending time preparing and researching, this is not Q&A for $$$ like Quora). So what is it that brings them to these forums (thus making it quick and easy for them to answer): learning.\nHuh? What do already knowledgeable people learn by hanging out watching less knowledgeable people ask questions?\nExercise\n\nWhat does someone learn from reading questions (and answers) in a technical forum?\nWhat does someone learn from answering?\n\n\n\n4.1.2 Engaging intellectual curiosity\n\nExperts love interesting problems and the solving of them.\nInteresting problems are those that reveal some new insights\nUninteresting problems are either obvious or unsolvable (poorly specified or not actionable).\nAsk questions like an intellectual partner.\n\n\n\n4.1.3 Steps to answered question\nAgain, this is derived from How To Ask Questions The Smart Way, Eric Raymond and Rick Moen\n\nChoose the right venue\nDo (and show) your homework\nConvey your situation\nAsk an actionable question\nEngage the interest of your audience\nFollow up showing that you tried their suggestions. Don’t be the “Ok, fixed it now” guy\n\n\n\n\nhttps://www.explainxkcd.com/wiki/index.php/979:_Wisdom_of_the_Ancients\n\n\n\n\n4.1.4 Examples\n\n4.1.4.1 J Random Hacker\nDirectly from (http://www.catb.org/~esr/faqs/smart-questions.html#examples)[http://www.catb.org/~esr/faqs/smart-questions.html#examples]\n\nStupid: I’m having problems with my motherboard. Can anybody help?\n\n\nJ. Random Hacker’s response to this is likely to be “Right. Do you need burping and diapering, too?” followed by a punch of the delete key.\n\n\nSmart: I tried X, Y, and Z on the S2464 motherboard. When that didn’t work, I tried A, B, and C. Note the curious symptom when I tried C. Obviously the florbish is grommicking, but the results aren’t what one might expect. What are the usual causes of grommicking on Athlon MP motherboards? Anybody got ideas for more tests I can run to pin down the problem?\n\n\nThis person, on the other hand, seems worthy of an answer. He/she has exhibited problem-solving intelligence rather than passively waiting for an answer to drop from on high.\n\n\nIn the last question, notice the subtle but important difference between demanding “Give me an answer” and “Please help me figure out what additional diagnostics I can run to achieve enlightenment.”\n\n\n\n4.1.4.2 Getting it wrong (and yet so wrong)\nThe second example is one from my person experience.\n\n\n\nAn email sent to the R Bugs Website, I included a large file with dump from sample command to help with debugging\n\n\nI received two different responses:\n\n\n\nA vaguely chilling RTFM style response\n\n\nSo, what happened? Well, the second response made it much more clear.\n\n\n\nA friendlier response: this was not a bug!\n\n\nSo … I had done some things right, but I had made a mistake. Sending to the r-bugs mailing list implied that I thought there was a bug. But there wasn’t, it wasn’t a problem with R, it was a problem with my computer setup. I should have sent this to another forum first, one for general support, instead I had implied that there was a bug in R. Insulting people’s work is a risky way to try to get their help!"
  },
  {
    "objectID": "insights/motivations.html#resources",
    "href": "insights/motivations.html#resources",
    "title": "4  Motivations",
    "section": "4.2 Resources",
    "text": "4.2 Resources\nAn article detailing how one open source participant is able to fund their work as a maintainer https://words.filippo.io/full-time-maintainer/\nFogel, K. (1999). Open Source Development with CVS. Coriolis Open Press, Scottsdale, AZ.\nCrowston, K., Wei, K., Howison, J., and Wiggins, A. (2011). Free (libre) open source software development: What we know and what we do not know. ACM Computing Surveys, forthcoming.\nBacon, J. (2009). The Art of Community: Building the New Age of Participation. O’Reilly Media.\nRaymond, E. S. and Moen, R. (2001). How to ask questions the smart way. Webpage. http://www.catb.org/esr/faqs/smart-questions.html"
  },
  {
    "objectID": "insights/licenses.html#sec-license-readings",
    "href": "insights/licenses.html#sec-license-readings",
    "title": "5  Licenses",
    "section": "5.1 Readings prior to class",
    "text": "5.1 Readings prior to class\nA chapter from a book, and four blog style articles. The book chapter should take between 1-2 hours to read, the blogs should take about another 20-40 minutes.\n\nChapter “Writing Copyright Licenses” of Kelty, C. M. (2008). Two Bits: The Cultural Significance of Free Software. Durham: Duke University Press Books. https://twobits.net/pub/Kelty-TwoBits.pdf#page=195\nA medium length chapter describing how open source licenses came to be. Should take between 1 and 2 hours to read.\nThe Open Source Definition. https://opensource.org/osd\n\nQuick list of elements to be found in open source licenses\nFSF Settles Suit Against Cisco. https://www.fsf.org/news/2009-05-cisco-settlement.html\nA summary of the Free Software Foundation enforcing the GPL license\nAmazon: NOT OK - why we had to change Elastic licensing. (2021, January 19). Elastic Blog. https://www.elastic.co/blog/why-license-change-AWS\n\nA summary of a recent trend in open source breaks with the “no field of use” restrictions, trying to sustain an open source business model funded by cloud service delivery.\nCarlos Munoz Ferrandis. (2022, August 31). OpenRAIL: Towards open and responsible AI licensing frameworks. Hugging Face Blog. https://huggingface.co/blog/open_rail\n\nMachine learning leaders, huggingface (yes, that’s their real company name), explaining why sharing trained AI/neutral network models/weights is both similar to sharing code and different, proposing a new license focused on ethical reuse of shared trained models."
  },
  {
    "objectID": "insights/licenses.html#lecture-notes",
    "href": "insights/licenses.html#lecture-notes",
    "title": "5  Licenses",
    "section": "5.2 Lecture notes",
    "text": "5.2 Lecture notes\n\n5.2.1 Copyright\n\nSource code is writing, just like a book or a poem.\nEdits are modifications, improvements create derived works, distribution makes copies\nWriting is copyrighted.\n\nOwner has the right to decide who can copy or modify\n\nViolations of a license triggered by distribution\n\ngiving to others, esp. selling\n\nPenalty for violation are:\n\nCourt order to stop distributing\nEconomic damages\n\n\n\n\n5.2.2 Revocation, time-limitation, and exclusivity\n\nThe text of specific copyright licenses can specify time-limits (after which they expire or change)\nOwner can release same work under many different licenses at once (as long as they are compatible).\n\nCalled dual-licensing\n\nOwner can re-license their own derivative works (but the license on the original is unchanged by that)\n\n\n\n5.2.3 Open Source Definition\nThe Open Source Initiative holds a trade mark so they can determine which licenses can be called open source. They have established the “Open Source Definition” with 10 elements (slightly abridged below):\n\n** Introduction **\n\n\nOpen source doesn’t just mean access to the source code. The distribution terms of open-source software must comply with the following criteria:\n\n\n\nFree Redistribution\n\n\n\nThe license shall not restrict any party from selling or giving away the software … The license shall not require a royalty or other fee for such sale.\n\n\n\nSource Code\n\n\n\n\nThe program must include source code, and must allow distribution in source code as well as compiled form … Deliberately obfuscated source code is not allowed. Intermediate forms such as the output of a preprocessor or translator are not allowed.\n\n\n\n\nDerived Works\n\n\n\nThe license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software.\n\n\n\nIntegrity of The Author’s Source Code\n\n\n\nThe license may restrict source-code from being distributed in modified form only if the license allows the distribution of “patch files” with the source code for the purpose of modifying the program at build time. The license must explicitly permit distribution of software built from modified source code. The license may require derived works to carry a different name or version number from the original software.\n\n\n\nNo Discrimination Against Persons or Groups\n\n\n\nThe license must not discriminate against any person or group of persons.\n\n\n\nNo Discrimination Against Fields of Endeavor\n\n\n\nThe license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.\n\n\n\nDistribution of License\n\n\n\nThe rights attached to the program must apply to all to whom the program is redistributed without the need for execution of an additional license by those parties.\n\n\n\nLicense Must Not Be Specific to a Product\n\n\n\nThe rights attached to the program must not depend on the program’s being part of a particular software distribution…\n\n\n\nLicense Must Not Restrict Other Software\n\n\n\nThe license must not place restrictions on other software that is distributed along with the licensed software. For example, the license must not insist that all other programs distributed on the same medium must be open-source software.\n\n\n\nLicense Must Be Technology-Neutral\n\n\n\nNo provision of the license may be predicated on any individual technology or style of interface.\n\n\n\n5.2.4 Copyleft\n\nSome licenses add an additional restriction; They are called copyleft licenses (a play on the word copyright).\nItem number 3, Derived Works, says:\n\n\nThe license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software.\n\nCopyleft licenses alter this by changing “must allow” to “if distributed, must require”\n\nThe license must allow modifications and derived works, and if distributed must require them to be distributed under the same terms as the license of the original software.\n\n\nCopyleft means derived works, that are distributed, cannot be licensed under a different license but must be licensed under the same license. See detailed discussion at copyleft.org\nThis is informally referred to as viral: derived works are “infected” and must all be copyleft.\nThis only applies if the changes are distributed. Usually this means distributed beyond the individual or company that owns the copyright. This means that companies can alter copyleft software, as long as they don’t let that code outside their own organization.\n\n\n\n5.2.5 Recent controversies discussion\n\n5.2.5.1 Cloud software\nThe original open source licenses were written before cloud, and the idea of Software As A Service (SAAS). Why does cloud and SAAS change a key circumstance?\n\nCloud delivery of software\n\nWhy was the Affero GPL created?\nAmazon Web Services and open source.\n\nElastic Search has created their own license. What does it do differently? Is it an open source license? Would OSI consider it to be an open source license?\n\n\n\n5.2.5.2 Artificial Intellegence software\nNeural Networks express much of their logic not in code, but in the weights of a trained neutral network.\n\nWhy does this change impact open source?\nCan trained neutral networks be modified or improved? What would be needed?\nWhat does the OpenRAILs license try to do? See Hugging Face reading above (Section 5.1).\nWould OSI judge that license to be “open source”? Which provisions, if any, might it violate?\n\n\n\n5.2.5.3 Recent license violation articles.\nhttps://undeleted.ronsor.com/voice.ai-gpl-violations-with-a-side-of-drm/\nDiscussed on Hacker News here: https://news.ycombinator.com/item?id=34681636\nNot just violating GPL, but likely other licenses too (not including license in distributed non-copyleft open source).\nLots of these out there, found this as searching:\nhttps://hackaday.com/2022/07/15/watch-out-for-lasercutter-manufacturers-violating-gpl/\nIncluding stories about startups whose cash out was sunk by OSS license violations:\nhttps://abovethelaw.com/2022/01/how-to-ensure-open-source-risks-wont-scuttle-your-deal/\nPoint is not to scare people from using open source, but to understand the very real meaning of the licenses. The more sophisticated understanding of open source you are gaining from this course will be an advantage in the job market."
  },
  {
    "objectID": "insights/coordination.html#pre-readings-for-class",
    "href": "insights/coordination.html#pre-readings-for-class",
    "title": "6  Coordination",
    "section": "6.1 Pre-readings for class",
    "text": "6.1 Pre-readings for class\n\nExpectancy Theory (Wikipedia) https://en.wikipedia.org/wiki/Expectancy_theory\nExpectancy Theory (useful figure): https://iedunote.com/expentancey-theory\nHowison, J., & Crowston, K. (2014). Collaboration through open superposition: A theory of the open source way. MIS Quarterly, 38(1), 29–50. http://james.howison.name/pubs/howison-2014-superposition.pdf"
  },
  {
    "objectID": "insights/coordination.html#presentation",
    "href": "insights/coordination.html#presentation",
    "title": "6  Coordination",
    "section": "6.2 Presentation",
    "text": "6.2 Presentation\n\n&lt;div id=\"quarto-navigation-envelope\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar-title\"&gt;Open Source Software Development: A socio-technical course&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar-title\"&gt;Open Source Software Development: A socio-technical course&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-next\"&gt;&lt;span class=\"chapter-number\"&gt;7&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Governance&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-prev\"&gt;&lt;span class=\"chapter-number\"&gt;5&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Licenses&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/index.html\"&gt;&lt;span class=\"chapter-number\"&gt;1&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Open Source Software Development: A socio-technical course&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/oss_syllabus.html\"&gt;&lt;span class=\"chapter-number\"&gt;2&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Syllabus for Open Source Software Development&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:quarto-sidebar-section-1\"&gt;Insights&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/insights/what_is_open_source.html\"&gt;&lt;span class=\"chapter-number\"&gt;3&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Introduction: What is open source?&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/insights/motivations.html\"&gt;&lt;span class=\"chapter-number\"&gt;4&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Motivations&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/insights/licenses.html\"&gt;&lt;span class=\"chapter-number\"&gt;5&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Licenses&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/insights/coordination.html\"&gt;&lt;span class=\"chapter-number\"&gt;6&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Coordination&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/insights/governance.html\"&gt;&lt;span class=\"chapter-number\"&gt;7&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Governance&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/insights/bias_lack_of_diversity.html\"&gt;&lt;span class=\"chapter-number\"&gt;8&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Bias and Lack of Diversity&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:quarto-sidebar-section-2\"&gt;Skills&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/skills/git_basic_workflow.html\"&gt;&lt;span class=\"chapter-number\"&gt;9&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Git basic workflow&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/skills/git_rewinding_work.html\"&gt;&lt;span class=\"chapter-number\"&gt;10&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Rewinding work&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/skills/branching.html\"&gt;&lt;span class=\"chapter-number\"&gt;11&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Local branching with Git.&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/skills/github_solo.html\"&gt;&lt;span class=\"chapter-number\"&gt;12&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;GitHub solo&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/skills/github_collaboration.html\"&gt;&lt;span class=\"chapter-number\"&gt;13&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Github collaboration&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/skills/git_cherrypick_split_pr.html\"&gt;&lt;span class=\"chapter-number\"&gt;14&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Split a Pull Request&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:quarto-sidebar-section-3\"&gt;Appendices&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/skills/skills_faq.html\"&gt;&lt;span class=\"chapter-number\"&gt;A&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Skills faq&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"quarto-meta-markdown\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-metatitle\"&gt;Open Source Software Development: A socio-technical course - &lt;span id=\"sec-coordination\" class=\"quarto-section-identifier\"&gt;&lt;span class=\"chapter-number\"&gt;6&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Coordination&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercardtitle\"&gt;Open Source Software Development: A socio-technical course - &lt;span id=\"sec-coordination\" class=\"quarto-section-identifier\"&gt;&lt;span class=\"chapter-number\"&gt;6&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Coordination&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardtitle\"&gt;Open Source Software Development: A socio-technical course - &lt;span id=\"sec-coordination\" class=\"quarto-section-identifier\"&gt;&lt;span class=\"chapter-number\"&gt;6&lt;/span&gt;  &lt;span class=\"chapter-title\"&gt;Coordination&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-metasitename\"&gt;Open Source Software Development: A socio-technical course&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercarddesc\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardddesc\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;section id=\"footnotes\" class=\"footnotes footnotes-end-of-document\" role=\"doc-endnotes\"&gt;\n&lt;hr /&gt;\n&lt;ol&gt;\n&lt;li id=\"fn1\"&gt;&lt;p&gt;Malone, T. W., &amp; Crowston, K. (1994). The interdisciplinary theory of coordination. ACM Computing Surveys, 26(1), 87–119. https://doi.org/10.1145/174666.174668 or http://ccs.mit.edu/papers/CCSWP157.html&lt;a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/section&gt;\n\n&lt;/main&gt; &lt;!-- /main --&gt;\n&lt;script id = \"quarto-html-after-body\" type=\"application/javascript\"&gt;\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const toggleBodyColorMode = (bsSheetEl) =&gt; {\n    const mode = bsSheetEl.getAttribute(\"data-mode\");\n    const bodyEl = window.document.querySelector(\"body\");\n    if (mode === \"dark\") {\n      bodyEl.classList.add(\"quarto-dark\");\n      bodyEl.classList.remove(\"quarto-light\");\n    } else {\n      bodyEl.classList.add(\"quarto-light\");\n      bodyEl.classList.remove(\"quarto-dark\");\n    }\n  }\n  const toggleBodyColorPrimary = () =&gt; {\n    const bsSheetEl = window.document.querySelector(\"link#quarto-bootstrap\");\n    if (bsSheetEl) {\n      toggleBodyColorMode(bsSheetEl);\n    }\n  }\n  toggleBodyColorPrimary();  \n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const isCodeAnnotation = (el) =&gt; {\n    for (const clz of el.classList) {\n      if (clz.startsWith('code-annotation-')) {                     \n        return true;\n      }\n    }\n    return false;\n  }\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    text: function(trigger) {\n      const codeEl = trigger.previousElementSibling.cloneNode(true);\n      for (const childEl of codeEl.children) {\n        if (isCodeAnnotation(childEl)) {\n          childEl.remove();\n        }\n      }\n      return codeEl.innerText;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    var currentTitle = button.getAttribute(\"title\");\n    button.setAttribute(\"title\", \"Copied!\");\n    let tooltip;\n    if (window.bootstrap) {\n      button.setAttribute(\"data-bs-toggle\", \"tooltip\");\n      button.setAttribute(\"data-bs-placement\", \"left\");\n      button.setAttribute(\"data-bs-title\", \"Copied!\");\n      tooltip = new bootstrap.Tooltip(button, \n        { trigger: \"manual\", \n          customClass: \"code-copy-button-tooltip\",\n          offset: [0, -8]});\n      tooltip.show();    \n    }\n    setTimeout(function() {\n      if (tooltip) {\n        tooltip.hide();\n        button.removeAttribute(\"data-bs-title\");\n        button.removeAttribute(\"data-bs-toggle\");\n        button.removeAttribute(\"data-bs-placement\");\n      }\n      button.setAttribute(\"title\", currentTitle);\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    const config = {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      arrow: false,\n      appendTo: function(el) {\n          return el.parentElement;\n      },\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    };\n    window.tippy(el, config); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i&lt;noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      // use id or data attribute instead here\n      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');\n      try { href = new URL(href).hash; } catch {}\n      const id = href.replace(/^#\\/?/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n      let selectedAnnoteEl;\n      const selectorForAnnotation = ( cell, annotation) =&gt; {\n        let cellAttr = 'data-code-cell=\"' + cell + '\"';\n        let lineAttr = 'data-code-annotation=\"' +  annotation + '\"';\n        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';\n        return selector;\n      }\n      const selectCodeLines = (annoteEl) =&gt; {\n        const doc = window.document;\n        const targetCell = annoteEl.getAttribute(\"data-target-cell\");\n        const targetAnnotation = annoteEl.getAttribute(\"data-target-annotation\");\n        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));\n        const lines = annoteSpan.getAttribute(\"data-code-lines\").split(\",\");\n        const lineIds = lines.map((line) =&gt; {\n          return targetCell + \"-\" + line;\n        })\n        let top = null;\n        let height = null;\n        let parent = null;\n        if (lineIds.length &gt; 0) {\n            //compute the position of the single el (top and bottom and make a div)\n            const el = window.document.getElementById(lineIds[0]);\n            top = el.offsetTop;\n            height = el.offsetHeight;\n            parent = el.parentElement.parentElement;\n          if (lineIds.length &gt; 1) {\n            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);\n            const bottom = lastEl.offsetTop + lastEl.offsetHeight;\n            height = bottom - top;\n          }\n          if (top !== null && height !== null && parent !== null) {\n            // cook up a div (if necessary) and position it \n            let div = window.document.getElementById(\"code-annotation-line-highlight\");\n            if (div === null) {\n              div = window.document.createElement(\"div\");\n              div.setAttribute(\"id\", \"code-annotation-line-highlight\");\n              div.style.position = 'absolute';\n              parent.appendChild(div);\n            }\n            div.style.top = top - 2 + \"px\";\n            div.style.height = height + 4 + \"px\";\n            let gutterDiv = window.document.getElementById(\"code-annotation-line-highlight-gutter\");\n            if (gutterDiv === null) {\n              gutterDiv = window.document.createElement(\"div\");\n              gutterDiv.setAttribute(\"id\", \"code-annotation-line-highlight-gutter\");\n              gutterDiv.style.position = 'absolute';\n              const codeCell = window.document.getElementById(targetCell);\n              const gutter = codeCell.querySelector('.code-annotation-gutter');\n              gutter.appendChild(gutterDiv);\n            }\n            gutterDiv.style.top = top - 2 + \"px\";\n            gutterDiv.style.height = height + 4 + \"px\";\n          }\n          selectedAnnoteEl = annoteEl;\n        }\n      };\n      const unselectCodeLines = () =&gt; {\n        const elementsIds = [\"code-annotation-line-highlight\", \"code-annotation-line-highlight-gutter\"];\n        elementsIds.forEach((elId) =&gt; {\n          const div = window.document.getElementById(elId);\n          if (div) {\n            div.remove();\n          }\n        });\n        selectedAnnoteEl = undefined;\n      };\n      // Attach click handler to the DT\n      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');\n      for (const annoteDlNode of annoteDls) {\n        annoteDlNode.addEventListener('click', (event) =&gt; {\n          const clickedEl = event.target;\n          if (clickedEl !== selectedAnnoteEl) {\n            unselectCodeLines();\n            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');\n            if (activeEl) {\n              activeEl.classList.remove('code-annotation-active');\n            }\n            selectCodeLines(clickedEl);\n            clickedEl.classList.add('code-annotation-active');\n          } else {\n            // Unselect the line\n            unselectCodeLines();\n            clickedEl.classList.remove('code-annotation-active');\n          }\n        });\n      }\n  const findCites = (el) =&gt; {\n    const parentEl = el.parentElement;\n    if (parentEl) {\n      const cites = parentEl.dataset.cites;\n      if (cites) {\n        return {\n          el,\n          cites: cites.split(' ')\n        };\n      } else {\n        return findCites(el.parentElement)\n      }\n    } else {\n      return undefined;\n    }\n  };\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i&lt;bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const citeInfo = findCites(ref);\n    if (citeInfo) {\n      tippyHover(citeInfo.el, function() {\n        var popup = window.document.createElement('div');\n        citeInfo.cites.forEach(function(cite) {\n          var citeDiv = window.document.createElement('div');\n          citeDiv.classList.add('hanging-indent');\n          citeDiv.classList.add('csl-entry');\n          var biblioDiv = window.document.getElementById('ref-' + cite);\n          if (biblioDiv) {\n            citeDiv.innerHTML = biblioDiv.innerHTML;\n          }\n          popup.appendChild(citeDiv);\n        });\n        return popup.innerHTML;\n      });\n    }\n  }\n});\n&lt;/script&gt;\n&lt;nav class=\"page-navigation\"&gt;\n  &lt;div class=\"nav-page nav-page-previous\"&gt;\n      &lt;a  href=\"/insights/licenses.html\" class=\"pagination-link\"&gt;\n        &lt;i class=\"bi bi-arrow-left-short\"&gt;&lt;/i&gt; &lt;span class=\"nav-page-text\"&gt;&lt;span class='chapter-number'&gt;5&lt;/span&gt;  &lt;span class='chapter-title'&gt;Licenses&lt;/span&gt;&lt;/span&gt;\n      &lt;/a&gt;          \n  &lt;/div&gt;\n  &lt;div class=\"nav-page nav-page-next\"&gt;\n      &lt;a  href=\"/insights/governance.html\" class=\"pagination-link\"&gt;\n        &lt;span class=\"nav-page-text\"&gt;&lt;span class='chapter-number'&gt;7&lt;/span&gt;  &lt;span class='chapter-title'&gt;Governance&lt;/span&gt;&lt;/span&gt; &lt;i class=\"bi bi-arrow-right-short\"&gt;&lt;/i&gt;\n      &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/nav&gt;\n&lt;/div&gt; &lt;!-- /content --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;"
  },
  {
    "objectID": "insights/governance.html#recent-innovations-in-decision-making",
    "href": "insights/governance.html#recent-innovations-in-decision-making",
    "title": "7  Governance",
    "section": "7.1 Recent innovations in decision making",
    "text": "7.1 Recent innovations in decision making\nWhile we may think the process of creating new models of decision making in groups has stopped or slowed, recent innovations abound:\n\nOccupy Wall Street Hand signals used during discussion at https://en.wikipedia.org/wiki/General_assembly_(Occupy_movement)\n\n\n\nNew constitutions written by countries. e.g., Chile’s new constitution process 2022\n\nStudents and faculty at the University of Texas are involved with a project (and software) to compare the texts of Constitutions around the world.. Including using diffs (just like git does) to understand changes. e.g., changes in Algeria’s constitution (diff 1989 2020). “Constitute was developed by the Comparative Constitutions Project at the University of Texas at Austin and the University of Chicago, directed by Zachary Elkins and Tom Ginsburg.”"
  },
  {
    "objectID": "insights/governance.html#exercise-note-taking-via-google-docs",
    "href": "insights/governance.html#exercise-note-taking-via-google-docs",
    "title": "7  Governance",
    "section": "7.2 Exercise: Note-taking via google docs",
    "text": "7.2 Exercise: Note-taking via google docs\nYou will be placed into groups of 3 (not sitting near each other):\n\nCreate a google doc and share it\n\nFor next 2 steps follow two rules:\n\nYou may not talk to each other\nYou may not write instructions to each other in the Google doc (or elsewhere, e.g., chat)\n\n\nWorking in this mode: produce a 2 page summary of:\n\nRoss Gardler & Gabriel Hanganu. (2013). Governance models. OSS-Watch.ac.uk. http://oss-watch.ac.uk/resources/governancemodels\n\nContinuing to work in this mode: include within your text three comparisons with the work linked below (comparisons could include that the work agrees, disagrees, extends, adds example, etc.):\n\nKarl Fogel. (2020). Chapter 8: Managing Participants. In “Producing OSS” Book. https://producingoss.com/en/managing-participants.html\n\nCreate a final heading, “Reflections on working without talking”. Move to sit next to each other. Ironically, you can talk to each other as you write down at least 3 bullet points about your experience doing this note-taking."
  },
  {
    "objectID": "insights/bias_lack_of_diversity.html",
    "href": "insights/bias_lack_of_diversity.html",
    "title": "8  Bias and Lack of Diversity",
    "section": "",
    "text": "Open source software production lacks diversity. In fact open source is even less diverse than the software industry in general. Open source shares this perhaps surprising characteristic with other open collaborative projects, including Wikipedia.\nIn class today we will undertake shared note-taking in groups on this topic, preparing for a discussion.\nExamine these “developer surveys” to add data (agreeing or disagreeing) with the opening statement of this page:\nhttps://survey.stackoverflow.co/2022/\nhttps://octoverse.github.com/\nOdd numbered groups will read:\nAlbusays, K., Bjorn, P., Dabbish, L., Ford, D., Murphy-Hill, E., Serebrenik, A., & Storey, M.-A. (2021). The Diversity Crisis in Software Development. IEEE Software, 38(2), 19–25.”, “https://doi.org/10.1109/MS.2020.3045817”Bias and lack of diversity”,\nEven numbered groups will read:\nFrluckaj, H., Dabbish, L., Widder, D. G., Qiu, H. S., & Herbsleb, J. D. (2022). Gender and Participation in Open Source Software Development. Proceedings of the ACM on Human-Computer Interaction, 6(CSCW2), 299:1-299:31. https://doi.org/10.1145/3555190\nBoth will read:\nAntin, J., Yee, R., Cheshire, C., & Nov, O. (2011). Gender Differences in Wikipedia Editing. In Proceedings of the 7th International Symposium on Wikis and Open Collaboration (pp. 11–14). New York, NY, USA: ACM.”, “https://doi.org/10.1145/2038558.2038561”,\nAnd all of these articles:\n“Nearly All of Wikipedia Is Written By Just 1 Percent of Its Editors”, “https://motherboard.vice.com/en_us/article/7x47bb/wikipedia-editors-elite-diversity-foundation”,\n“Wikipedia page on gender bias in Wikipedia (so meta)”, “https://en.wikipedia.org/wiki/Gender_bias_on_Wikipedia”,\n“Inside Wikipedia’s Attempt to Use Artificial Intelligence to Combat Harassment”, “https://motherboard.vice.com/en_us/article/aeyvxz/wikipedia-jigsaw-google-artificial-intelligence”,\nQuestions for discussion:\n\nWhat types of diversity does the literature discuss? How does open source compare to: a) the world, b) software industry as a whole.\nWhat causes are discussed?\nWhat possible approaches to improving the situation are discussed? How might approaches used in Wikipedia help?\nWhat authority of legitimacy does work to improve diversity draw on?\nIn what ways does a lack of diversity mean that open source is failing to live up to its own ideals?"
  },
  {
    "objectID": "skills/git_basic_workflow.html#overview",
    "href": "skills/git_basic_workflow.html#overview",
    "title": "9  Git basic workflow",
    "section": "9.1 Overview",
    "text": "9.1 Overview\nIn this exercise, we will practice basic Linux command lines, including ls, cd, mkdir, touchand basic git commands including git status, git add, git commit, and git log.\nOnce we are able to move around in the shell, create files and directories, then we are ready for the basic git workflow, which is:\n\nedit a file\nsave those edits\ngit add\ngit commit -m \"commit message\"\n\n\nedit → save → add → commit"
  },
  {
    "objectID": "skills/git_basic_workflow.html#working-with-files-and-the-commandline-in-rstudio",
    "href": "skills/git_basic_workflow.html#working-with-files-and-the-commandline-in-rstudio",
    "title": "9  Git basic workflow",
    "section": "9.2 Working with files and the commandline in Rstudio",
    "text": "9.2 Working with files and the commandline in Rstudio\nGoal of this step: get familiar with basic Linux command lines: ls, cd, mkdirand touch.\nLog in to the R studio. The interface is shown like below.\nType ls in the terminal. It will list the files and directories in a specified directory or the current working directory if no directory is specified.\n\nType mkdir air_plane_exercise in the terminal. It will create a new directory with a specified name in the file system.\n\nType ls in the terminal to check the files and directories in current working directory.\n\nType cd air_plane_exercise in the terminal to change the current working directory to air_plane_exercise folder.\n\nType touch instructions.txt in the terminal to create a new text file named “instructions” inside the air_plane_exercise folder. You can type ls to check the updated files and folders.\n\nNow go to the files explorer, double click the “air_plane_exercise” folder and then enter the “instructions.txt”. Enter something in the text editor. Save the file."
  },
  {
    "objectID": "skills/git_basic_workflow.html#creating-a-git-repo",
    "href": "skills/git_basic_workflow.html#creating-a-git-repo",
    "title": "9  Git basic workflow",
    "section": "9.3 Creating a git repo,",
    "text": "9.3 Creating a git repo,\nGoal of this step: learn git init.\nType git init in the terminal. The git init command is typically used to start a new repository or to convert an existing project into a Git repository."
  },
  {
    "objectID": "skills/git_basic_workflow.html#git-status-add-commit",
    "href": "skills/git_basic_workflow.html#git-status-add-commit",
    "title": "9  Git basic workflow",
    "section": "9.4 Git status, add, commit",
    "text": "9.4 Git status, add, commit\nGoal of this step: learn git status, git add, and git commit\nMake some changes in the “instructions.txt” and save it.\nType git status in the terminal to show the state of the working directory and the staged changes. You will see untracked files.\n\nType git add in the terminal to stage changes for a commit. It allows you to select which changes in the working directory will be included in the next commit.\nType git status in the terminal, you will see “changes to be committed”\nType git commit -m \"paper plane2\"to save changes to the local repository. It takes all of the changes staged with git add and stores them as a new commit with a message describing the changes.\n\nType git status to check status again. It should show “nothing to commit, working tree clean”.\n\nMake some changes:\n\nedit the “instructions” text file, save it, git add it, git commit it\ncreate another text file named “license”, save it, git add it, git commit it"
  },
  {
    "objectID": "skills/git_basic_workflow.html#using-git-log-to-understand-what-is-in-the-repo",
    "href": "skills/git_basic_workflow.html#using-git-log-to-understand-what-is-in-the-repo",
    "title": "9  Git basic workflow",
    "section": "9.5 Using git log to understand what is in the repo",
    "text": "9.5 Using git log to understand what is in the repo\nGoal of this step: learn git log\nType git log in the terminal to display the commit history. It will show a list of all commits in the current branch, along with information about the author, date, and commit message for each one.\nThe latest message will show at the top and the oldest will show at the bottom.\n\nYou can also use git log --oneline --abbrev-commit --all --graph to show git log in short. \nIn class we will mostly add --color to this as well:\ngit log --oneline --abbrev-commit --all --graph --decorate --color\nYou can learn more about reading the output of that command here: https://stackoverflow.com/questions/22313343/git-graph-what-do-the-lines-and-asteriks-denote\nThe * characters show a single commit, the lines help us understand the branches.\nHere are the review of Linux command lines and Git command lines"
  },
  {
    "objectID": "skills/git_basic_workflow.html#linux-command-lines",
    "href": "skills/git_basic_workflow.html#linux-command-lines",
    "title": "9  Git basic workflow",
    "section": "9.6 Linux Command Lines",
    "text": "9.6 Linux Command Lines\n\ncd → change directory\ncd () is to change the current working directory to a specified directory.\nls → list files\nls (list directory contents) is to list the files and directories in a specified directory or the current working directory if no directory is specified.\npwd → present working directory\npwd shows the full path to the current directory. It can help understand how the files look. tree .. is another useful option (this goes up a directory using the two dots: .. and tree shows the files in a hierarchical diagram.)\nmkdir → make new directory\nmkdir (make directory) is to create a new directory with a specified name in the file system."
  },
  {
    "objectID": "skills/git_basic_workflow.html#git",
    "href": "skills/git_basic_workflow.html#git",
    "title": "9  Git basic workflow",
    "section": "9.7 Git",
    "text": "9.7 Git\n\nGit add\ngit add is a command used in Git to stage changes for a commit. It allows you to select which changes in the working directory will be included in the next commit.\nGit commit -m “message”\ngit commit saves changes to the local repository. It takes all of the changes staged with git add and stores them as a new commit with a message describing the changes.\nGit status\ngit status shows the state of the working directory and the staged changes, and it indicates which branch you are currently on.\nGit log\ngit log is to display the commit history of a repository. It shows a list of all commits in the current branch, along with information about the author, date, and commit message for each one."
  },
  {
    "objectID": "skills/git_rewinding_work.html#prep-exercise.",
    "href": "skills/git_rewinding_work.html#prep-exercise.",
    "title": "10  Rewinding work",
    "section": "10.1 Prep exercise.",
    "text": "10.1 Prep exercise.\nLog into the server: https://edupod.cns.utexas.edu/ and choose Rstudio. Then your task is to create a git repository that when you run our long viz command\ngit log --oneline --abbrev-commit --all --graph --decorate --color\nYour screen shows this result:\ntest-rewind % git log --oneline --abbrev-commit --all --graph --decorate --color                         \n* 50590c5 (HEAD -&gt; main) made third edit\n* 39f89db made second edit\n* 1b2162e made first edit\nHint: You will need to start by making a directory called test-rewind."
  },
  {
    "objectID": "skills/git_rewinding_work.html#why-rewind",
    "href": "skills/git_rewinding_work.html#why-rewind",
    "title": "10  Rewinding work",
    "section": "10.2 Why rewind?",
    "text": "10.2 Why rewind?\nWhen we are working we often want to try things out before we are 100% sure that they will work. We want to be able to experiment and find our way through a problem. If our experiment doesn’t work, we want to be able to step backwards in time, to find an earlier version that is a good new starting point.\nIn many ways this is identical to the idea of a “save point” in a game. We can step backwards in time and try again. We can reload that point at any time in the future. In our paper plane analogy, we can reach out and grab any tray in our repository.\nGit enables us to save full copies of our working directory. We can then get back to the state of our work at any time we made a commit. When we check out a historical state, we get the files and the folders as as they were. So git actually swaps out the directory.\nWhen I first started using git, I found this a bit confusing. usually when one restores from a backup, it is more like downloading a file. One gets to choose: - what to call the newly obtained older version - where to put it - what to do if there is a file that would be over-written.\nWhat git does, though, is it swaps out all the files and folders with the previous version.\nAs we’ve seen, though, git is more fine-grained than a video game save-point. We often have files that have changed that we don’t want included in our save-point, this is why we have the git add stage before git commit.\nThus we can have untracked files or folders hanging around in our working folder. Git won’t change these when we do a checkout. So what happens is:\n\ngit checks that all tracked files are in a “clean” state. This means that they are unchanged from the last commit. This is git checking that you have “saved your work” before it swaps out the files.\ngit goes to its repository, locates the commit you ask for, and swaps all the tracked files and folders in the working directory.\ngit remembers what commit you’ve moved to, so that if you make edits you can decide how they should be applied into the stream of commits in your repository.\n\nTo move backwards in time we use the git checkout command. We have to let git know which commit we want to go back to. We can specify that using the name that git uses, which is the hash (e.g., 1b2162e) shown by git log.\nStarting with our 3 commit test-rewind repo:\njlh5498@INFO-A64206 test-rewind % git log --oneline --abbrev-commit --all --graph --decorate --color\n* 50590c5 (HEAD -&gt; main) made third edit\n* 39f89db made second edit\n* 1b2162e made first edit\nWe can move to the first commit using\njlh5498@INFO-A64206 test-rewind % git checkout 1b2162e\nwhich produces the output\nNote: switching to '1b2162e'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 1b2162e made first edit\nIf we run our viz command we can see a little more:\njlh5498@INFO-A64206 test-rewind % git log --oneline --abbrev-commit --all --graph --decorate --color\n* 50590c5 (main) made third edit\n* 39f89db made second edit\n* 1b2162e (HEAD) made first edit\nSee how the word HEAD now appears on the bottom line and not the top line? This is git’s way of telling us what is checked out.\nWhen git says detached HEAD (a little intense sounding) git is highlight for us that our current working directory is not at the last commit. This means that if we try to make a new commit git wants us to know that it won’t just pop onto the top of the repo like usual. (git will create an unnamed branch, we’ll discuss branches later).\nFor now, though, we can inspect files back at this version, and we can shift to another version (using checkout). For example we can move back to our top commit, using git checkout main (where main might be master on a system configured with an older git).\njlh5498@INFO-A64206 test-rewind % git checkout main\njlh5498@INFO-A64206 test-rewind % git log --oneline --abbrev-commit --all --graph --decorate --color\n* 50590c5 (HEAD -&gt; main) made third edit\n* 39f89db made second edit\n* 1b2162e made first edit\nNotice how HEAD now points to the top commit? If we edit/add/commit our commits will drop back on top.\njlh5498@INFO-A64206 test-rewind % git add README \njlh5498@INFO-A64206 test-rewind % git commit -m \"Made fourth edit\"\n[main ff7997b] Made fourth edit\n 1 file changed, 1 insertion(+)\njlh5498@INFO-A64206 test-rewind % git log --oneline --abbrev-commit --all --graph --decorate --color\n* ff7997b (HEAD -&gt; main) Made fourth edit\n* 50590c5 made third edit\n* 39f89db made second edit\n* 1b2162e made first edit\nRemember, git swaps out all the tracked files when you do a checkout. If you have untracked files you will find they are unaffected by a git checkout. Create a file called my-untracked-file run git status then run git checkout &lt;earlier-commit&gt; (where &lt;earlier-commit&gt; is a hash for your first commit), then run git status again."
  },
  {
    "objectID": "skills/git_rewinding_work.html#revert---commits-to-undo-commits",
    "href": "skills/git_rewinding_work.html#revert---commits-to-undo-commits",
    "title": "10  Rewinding work",
    "section": "10.3 Revert - commits to undo commits",
    "text": "10.3 Revert - commits to undo commits\nSee https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/"
  },
  {
    "objectID": "skills/branching.html",
    "href": "skills/branching.html",
    "title": "11  Local branching with Git.",
    "section": "",
    "text": "12 Branching with local git\nBranching (and merging) is a useful way to keep different tasks organized and synchronized, even when working locally with git. Below we will work through a scenario for git branching, showing the commands and two different vizualizations. Eventually branching becomes a key part of working with github and shared repositories, but it is useful to approach it separately first."
  },
  {
    "objectID": "skills/branching.html#a-scenario",
    "href": "skills/branching.html#a-scenario",
    "title": "11  Local branching with Git.",
    "section": "12.1 A scenario",
    "text": "12.1 A scenario\nImagine you are running a coffee roaster. You have code that produces a daily report that is emailed to your team. Each day the point of sale system makes new data available. Each night your computer executes a script (report_script.Rmd) to access the data, create, and email the report.\nWe are going to manage a situation where we want to: 1. experiment and break things 2. keep things running\nIt is very hard to do these things at the same time. Branching helps us to do this.\nOne option might be to maintain different versions of files using different file names (report_script.Rmd and new_report_script.Rmd. This becomes very messy when we have many files and folders involved (/images and /new_images???). This is even worse when we have multiple experiments and attempts going on in parallel and entirely hopeless when we move online and are working with groups of people.\nRecall, though, that git enables us to “swap out” our working directory. Until now we’ve kept this linear, each new version added after the last. But branching enables us to keep parallel lines of commits (as though we had two lines of trays with on our paper plane repository table)."
  },
  {
    "objectID": "skills/branching.html#coordinating-new-work-while-keeping-old-work-running",
    "href": "skills/branching.html#coordinating-new-work-while-keeping-old-work-running",
    "title": "11  Local branching with Git.",
    "section": "12.2 Coordinating new work while keeping old work running",
    "text": "12.2 Coordinating new work while keeping old work running\nCurrently the report is pretty simple, it’s just a table of sales divided up between in-store and online. Each day’s sales are added as a new row in the table.\ncd ~\nmkdir scratch_branching\ncd scratch_branching\ngit init\nInitialized empty Git repository in scratch_branching/.git/\nWe can now add the reporting script and the data for monday. To simulate editing a file using an editor we can use some fancy syntax so you can copy and paste it.\ncat &gt;&gt; reporting_script.Rmd &lt;&lt;&lt; \"# Initial code for table report\"\ngit add reporting_script.Rmd\ngit commit -m \"starting setup\"\n[master (root-commit) 24bcda4] starting setup\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 data_monday.csv\n create mode 100644 reporting_script.Rmd\n\n\n\n\nThe scripts runs normally on Monday night.\nOne Tuesday morning you decide that the data would be better presented as a chart. You have some ideas but rightly decide it will take more than a day or two to get that working.\nIn the meantime you still have to produce the report. So you create a branch called towards_chart and begin working there, leaving the master branch untouched to produce the Tuesday night report.\ngit branch towards_chart\ngit checkout towards_chart\nAgain we can simulate editing the file.\ncat &gt;&gt; reporting_script.Rmd &lt;&lt;&lt; \"# Work towards charts\"\ngit status\nOn branch towards_chart\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   reporting_script.Rmd\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ngit add reporting_script.Rmd\ngit commit -m \"Worked towards charts\"\n[towards_chart acc3f42] Worked towards charts\n 1 file changed, 1 insertion(+)\nOn Tuesday you see that the report ran fine (using the code in master) and you continue to work on the charts.\ncat &gt;&gt; reporting_script.Rmd &lt;&lt;&lt; \"# More work towards charts\"\ngit add reporting_script.Rmd\ngit commit -m \"More work towards charts\"\n[towards_chart acc3f42] Worked towards charts\n 1 file changed, 1 insertion(+)\nOn Wednesday morning, though, you get an error from your reporting script. The online sales system updated and the data files now include a new column saying whether a sale was cash or credit. You know how to get things working again, but you still aren’t ready to launch your chart system. You don’t want to wait until your chart work is finished to get the report going again.\nSo you switch to master, edit the reporting file to handle the new column, then add and commit the change.\ngit checkout master\nSwitched to branch 'master'\nNow we are back on the master branch and we won’t see our work towards the charts at all. So over on the towards_chart branch we can work away without upsetting the working code on master.\nCheck the current content of the script (will show nothing about charts)\ncat reporting_script.Rmd\nInitial code for table report\nSo now we can, without involving our work towards the chart, make the bugfix on master.\ncat &gt;&gt; reporting_script.Rmd &lt;&lt;&lt; \"# Fix to match new data format\"\ngit add reporting_script.Rmd\ngit commit -m \"A fix to match new data format\"\nNow if we run our git viz command:\ngit log --oneline --abbrev-commit --all --graph --decorate --color\nwe will see our branching starting to show up:\njlh5498@educcomp04:~/scratch_branching$ git log --oneline --abbrev-commit --all --graph --decorate --color\n* 48afd7c (HEAD -&gt; master) A fix to match new data format\n| * 5c7fc76 (towards_chart) More work towards charts\n| * c72d745 Worked towards charts\n|/  \n* c434df6 starting setup\nHappily the report runs fine on Wednesday night.\nThursday morning you switch back to the towards_chart branch and are pleased to get things working.\ngit checkout towards_chart\ncat &gt;&gt; reporting_script.Rmd &lt;&lt;&lt; \"# Code to finalize the charts\"\ngit add reporting_script.Rmd\ngit commit -m \"Finished up the charts\"\nYou are ready to add the chart into the report by moving the code to the master branch.\nBut if you just merge the code back to master you may find that the code for the chart doesn’t work with the change to handle the updated data files. So you may have some merging to do. But you don’t know if you can get that done before the report has to run, and you don’t want to get caught fiddling with master because if the report tries to run you could end up with nothing going out that night.\nSo you first merge master over to your towards_chart branch, and ensure that things work well and the two pieces of work done in parallel work well together (charts and dealing with the new column).\nFirst confirm which branch you are in, this command lists the branches and the one highlighted with the * is the current branch. git status can also show you.\ngit branch -v \ngit branch -v\n  master          576bc90 A fix to match new data format\n* towards_chart bef7b72 Finished up the charts\nThen merge over the master branch into the towards_chart branch.\ngit merge master\nAuto-merging reporting_script.Rmd\nCONFLICT (content): Merge conflict in reporting_script.Rmd\nAutomatic merge failed; fix conflicts and then commit the result.\nAh, good thing we did this on the branch because we do end up with a conflict. Git can resolve some conflicts but not all. Git shows conflicts by adding special lines of text into the file (using &gt;&gt;&gt;&gt;&gt;&gt; and &lt;&lt;&lt;&lt;&lt; as indicators. To resolve them we remove those lines and leve the file the way we want it to be.\n# Initial code for table report\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n# Work towards charts\n# More work towards charts\n# Code to finalize the charts\n=======\n# Fix to match new data format\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\nThe parts separated by ======== show edits that conflict. Looking at this we can see that we want all the lines, so we edit the file to show:\n# Initial code for table report\n# Fix to match new data format\n# Work towards charts\n# More work towards charts\n# Code to finalize the charts\nNow we can save that file. Git knows that we are fixing a conflict, so git status shows:\nOn branch towards_chart\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n    both modified:   reporting_script.Rmd\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nAnd now we can add and commit to finish the merge.\ngit add reporting_script.Rmd\ngit commit -m \"merged bug fix with charts code\"\n[towards_chart e420a05] merged bug fix with charts code\n(Git can only flag syntactical conflicts, not semantic conflicts, so one would also try running some test reports to make sure things are all working).\nSo once you’ve resolved all issues, then you can merge the towards_chart branch back to master, signalling that you are ready to launch your new report with charts.\ngit checkout master\ngit merge towards_chart\nSwitched to branch 'master'\nUpdating 576bc90..e420a05\nFast-forward\n reporting_script.Rmd | 3 +++\n 1 file changed, 3 insertions(+)\nFinally we can visualize this branching, editing, and merging in two ways. First we can use this handy command to see a visualization in the command line.\ngit log --oneline --abbrev-commit --all --graph --decorate --color               \nWhich will show us this (using an image here because the color doesn’t copy):\n\nWe can also see this visually using learngitbranching, see the short video below.\n\n\n\n\n\n12.2.1 Exercises (in-class):\n\nGo to “Learn Git Branching” site: https://learngitbranching.js.org/. (Note that this site is multi-locale, see the small planet icon in the bottom right?)\nDo exercises 2 and 3 (“Branching in Git” and “Merging in Git”)\nShift back to Rstudio on the server and replicate the “Merging in Git” lesson. You will need to start with these commands (to create a new, empty, repo):\n\ncd ~\nmkdir replicate_learngitbranching\ncd replicate_learngitbranching\ngit init\nRemember that when we are working in the terminal it is different from learngitbranching because we have to actually create, edit, and save files before we can commit. We also have to use git commit -m 'some message' rather than just git commit."
  },
  {
    "objectID": "skills/github_solo.html#create-a-github-account",
    "href": "skills/github_solo.html#create-a-github-account",
    "title": "12  GitHub solo",
    "section": "12.1 Create a GitHub account",
    "text": "12.1 Create a GitHub account\nYou will need to have a working GitHub account. You are welcome to use an existing Github account (if you happen to have one), or you can create one just for this course (a “throwaway”) or you can use your real name and plan to retain this account for your professional life. Whichever you choose you will need a working email address associated with the account (to confirm and see the notifications)."
  },
  {
    "objectID": "skills/github_solo.html#create-a-repository-on-github",
    "href": "skills/github_solo.html#create-a-repository-on-github",
    "title": "12  GitHub solo",
    "section": "12.2 Create a repository on GitHub",
    "text": "12.2 Create a repository on GitHub\nOnce you are logged into GitHub you can create a repository using the “New Repository” button (which is usually green colored).\nYou will need to give two things:\n\nA repository name. I suggest that you use a prefix of i320d- for all the repos used in this class. That will ensure you can easily clean them up later.\nBe sure to select “Add a README file” under the Initialize this repository with … section.\n\nOnce you’ve created the repository you will see a “Quick Setup” page. This shows you the URL of the repository that you’ve created. This is how mine looks:\n\nYou should copy the URL using the little grey box-on-box on the right."
  },
  {
    "objectID": "skills/github_solo.html#clone-the-repo-to-your-local-space",
    "href": "skills/github_solo.html#clone-the-repo-to-your-local-space",
    "title": "12  GitHub solo",
    "section": "12.3 Clone the repo to your local space",
    "text": "12.3 Clone the repo to your local space\nNow that we have an empty repo on Github, we can bring it down to our local space. This uses a git command called git clone.\nGo to the Edupod Rstudio and to the Terminal tab.\nBefore running git clone, everyone needs to ensure they are in a folder that is not inside another repo. You can place repos anywhere you want. I suggest placing them all into your home folder on edupod. You can be sure you are there by running this command (read as “cd tilde” because tilde is a shortcut for your home directory).\ncd ~\nTo be sure that you aren’t inside another repo you can run git status and you want to see a fatal error.\ngit status\nfatal: not a git repository (or any parent up to mount point /stor/home)\nStopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).\nIf you do not see the fatal error, then you need to move up in your folder hierarchy until you are not in a repo. Use cd .. or cd ~. If you still get that error and you are in your home folder, see FAQ for “I accidentally made my home folder a git repo” at Section A.2\nThen clone your repository and change directory into it.\nFor my example repo in the image above this would be:\ngit clone https://github.com/jameshowison/i320d-test1.git\ncd i320d-test1\nYou will need to replace the repo URL and the repository name to match yours like:\ngit clone &lt;repo_url&gt;\ncd &lt;repository_name&gt;"
  },
  {
    "objectID": "skills/github_solo.html#editsaveaddcommit-as-usual",
    "href": "skills/github_solo.html#editsaveaddcommit-as-usual",
    "title": "12  GitHub solo",
    "section": "12.4 Edit/Save/Add/Commit as usual",
    "text": "12.4 Edit/Save/Add/Commit as usual\nNow we can do our usual git stuff: We can edit a file, save it, then use git add and git commit -m \"Some message\" to store our new version in git.\nAs usual, here is a command that simulates editing and saving a file (which you can also do through the RStudio interface):\necho -e \"\\n\\nA new line in README\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"Added line to README\""
  },
  {
    "objectID": "skills/github_solo.html#obtain-special-password-for-commandline-git-pat",
    "href": "skills/github_solo.html#obtain-special-password-for-commandline-git-pat",
    "title": "12  GitHub solo",
    "section": "12.5 Obtain special password for commandline git (PAT)",
    "text": "12.5 Obtain special password for commandline git (PAT)\nYour password for GitHub will give you access to the GitHub web interface, but to connect git on the commandline to GitHub we need a Personal Access Token (PAT). You can think of this as a special use password. Go to https://github.com/settings/tokens\n\nClick “Generate token”.\n\nChose “Generate New Token (classic)” from the drop down\nSelect “repo” “workflow” and “user” permissions and then hit “Generate Token”\n\nYou will then be able to copy the PAT. You need to keep this somewhere you can copy from in class. I put it into my password manager (I use 1password). Note that this gives full access to your GitHub account, so if you have work stuff or other things in there, come talk to me or use a “fine-grained access token” scoped only to the repos for this class."
  },
  {
    "objectID": "skills/github_solo.html#send-your-changes-up-to-github",
    "href": "skills/github_solo.html#send-your-changes-up-to-github",
    "title": "12  GitHub solo",
    "section": "12.6 Send your changes up to GitHub",
    "text": "12.6 Send your changes up to GitHub\nThe git push command will move any new work from your local repo, up to GitHub.\ngit push\nRstudio on EduPod will pop up a window for your username/password. You should use your GitHub username, but the PAT when asked for the password. Your regular GitHub password will not work. You have to use the PAT you created in the previous step. If you didn’t copy it down, you can create a new one, don’t forget to store it somewhere so that you can copy it for use in class.\nBy default you will have to re-enter this username/PAT any time you haven’t run a git push command for 15 minutes. More details in the FAQ on this in Section A.1.2 but you can reduce pops by running:\ngit config --global credential.helper 'cache --timeout=10000000'\nYou may also see a message about needing to set an upstream branch. Something like this:\n$ git push\nfatal: The current branch test-branch has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin test-branch\nYou can copy that suggested command within terminal as run it. This tells git to create your new branch on the origin remote."
  },
  {
    "objectID": "skills/github_solo.html#find-your-branch-on-github-create-and-merge-pull-request",
    "href": "skills/github_solo.html#find-your-branch-on-github-create-and-merge-pull-request",
    "title": "12  GitHub solo",
    "section": "12.7 Find your branch on GitHub, create and merge Pull Request",
    "text": "12.7 Find your branch on GitHub, create and merge Pull Request\nOn GitHub you can now find your branch using the Branch drop-down.\n\n\n\nImage of drop down menu for branches, shows for-pull-request and master\n\n\nSelect that and you will see a “Compare & pull request button”\n\n\n\nImage of Compare and Pull Request Button\n\n\nWhen you click the green button you will see:\n\n\n\nImage showing New PR interface. A purple circle highlights the section discussed below\n\n\nNotice the purple circle that shows base: main &lt;-- compare: new-feature. Notice that the arrow points right to left. The destination of the PR comes first (here it is main) and the place we are merging from comes second (here it is new-feature).\nThe interface shows that the branches can be merged automatically. This means that the changes in the new-feature branch would not cause conflicts if merged into main.\nYou can go ahead and Create the PR.\nThis will lead to a PR page, where you could chat about the suggested changes.\n\n\n\nImage showing PR. A purple circle highlights the section discussed below\n\n\nNotice the sentence in the purple circle: jameshowison wants to merge 1 commit into main from new-feature that is a useful succient summary of what a PR is: it is a request to merge a set of commits from one branch into another.\nIf you hit the “Merge Pull Request” button GitHub will merge the branch to main, close the PR, and suggest that you delete the branch."
  },
  {
    "objectID": "skills/github_solo.html#synchronize-your-local-repo",
    "href": "skills/github_solo.html#synchronize-your-local-repo",
    "title": "12  GitHub solo",
    "section": "12.8 Synchronize your local repo",
    "text": "12.8 Synchronize your local repo\nAll the PR steps have happened on GitHub only, so they aren’t yet reflected in your local repo. We have merged new-feature to main on GitHub.\nAt this point you need to synchronize by first switching to main:\ngit checkout main\nand then get changes from the remote\ngit pull"
  },
  {
    "objectID": "skills/github_solo.html#summary-figure",
    "href": "skills/github_solo.html#summary-figure",
    "title": "12  GitHub solo",
    "section": "12.9 Summary figure:",
    "text": "12.9 Summary figure:\n\n\n\n\n\nsequenceDiagram\n    participant GitHub_main AS GitHub main \n    participant local \n    participant local_new AS local new-feature\n    participant GitHub_new AS GitHub new-feature\n    \n    GitHub_main -&gt;&gt;local : git clone\n    local -&gt;&gt; local_new : git checkout -b new-feature\n    local_new -&gt;&gt; local_new : edit/add/commit\n    local_new -&gt;&gt; GitHub_new : git push\n    GitHub_new -&gt;&gt; GitHub_main : Create/Merge Pull Request\n    GitHub_main -&gt;&gt; local : git checkout main / git pull"
  },
  {
    "objectID": "skills/github_collaboration.html#collaboration-picture",
    "href": "skills/github_collaboration.html#collaboration-picture",
    "title": "13  Github collaboration",
    "section": "13.1 Collaboration picture",
    "text": "13.1 Collaboration picture\n\nIn the image above we can see the overall situation when people are collaborating through a git hosting service like github.\nAt the top we see the “Github Cloud” and at the bottom we see our laptop. Everything we have done so far (edit-save-add-commit and branching) happens on the laptop.\nIn the Cloud we see two repositories. The one on the right called “Upstream” (or sometimes “Project” or “Shared”) is the space where all our work will collect. The one on the left called “Origin” is our cloud copy of the shared repository. You can think of a fork as a backup space for the repo on your laptop; the fork lives in your github account namespace.\n\n\n\n\nsequenceDiagram\n    participant upstream AS upstream&lt;br /&gt;aka shared/project\n    participant origin AS origin&lt;br /&gt;aka fork\n    participant laptop AS laptop&lt;br /&gt; aka local\n    \n    upstream -&gt;&gt;origin : github fork\n    origin -&gt;&gt;laptop : git clone\n\n    \n    laptop -&gt;&gt;laptop : git branch\n    laptop -&gt;&gt;laptop : edit/add/commit\n    \n    upstream -&gt;&gt;upstream : maintainer commits&lt;br /&gt;or pull requests&lt;br /&gt;from others merged\n\n    laptop -&gt;&gt;laptop : edit/add/commit\n    \n    note over laptop : Work finished, need to&lt;br /&gt;gather changes since clone\n    \n    upstream -&gt;&gt;laptop : git pull upstream \n    laptop -&gt;&gt;laptop : resolve conflicts&lt;br /&gt;git add/commit\n    laptop -&gt;&gt;origin : git push\n    origin -&gt;&gt;upstream : github pull request\n\n\n\n\n\nThere are 6 steps to this workflow (also depicted in diagram below)\n\nWe create a fork of the upstream repo. This happens on github.\nBring that fork down to our laptop where we can work on it. This is done using git clone a command that is run on the laptop. We pass git clone the URL of the fork.\nUse git branch and git checkout to create a branch, then the edit-save-add-commit as usual.\nSynchronize using git pull upstream to get any work that has happened in upstream since you cloned your fork. Such work might come from the maintainers of the project doing their own work there, or the maintainers merging in pull requests from other contributors. This is quite similar to merging main to our branches if working locally.\nUse git push to move your new edits up to github. Note that they go to your fork, not directly to upstream.\nCreate a pull request on github. We do this while looking at our fork. This lets the upstream repo know that you have work ready to contribute.\n\nThe pull request can then be merged by the maintainer of the upstream repo.\n\nA PR is a request for the maintainer of the upstream repo to run a git pull from your branch on your fork into their repository"
  },
  {
    "objectID": "skills/github_collaboration.html#basic-forking-workflow-setup",
    "href": "skills/github_collaboration.html#basic-forking-workflow-setup",
    "title": "13  Github collaboration",
    "section": "13.2 Basic forking workflow setup",
    "text": "13.2 Basic forking workflow setup\n\nGroup of three: Contributor A, Maintainer, Contributor B.\n\nArrange your chairs so that you can see each others screens. That means sitting in a row so you can easily see what each other are seeing. Maintainer sits in the middle.\n\n\n\n\nflowchart LR\n  ContributorA---|left of|Maintainer---|right of|ContributorB\n\n\n\n\n\n\nMaintainer creates new repository on github.\nContributor A and Contributor B log into github, find the new repository created by Maintainer and fork it.\n\n\n\n\nImage showing fork button in top right\n\n\n\nContributor A and Contributor B should clone their fork repo to their working space.\n\nUsually this is a laptop, but this semester we are using Eduhub Rstudio, which you can access as usual via that link.\nLog into Rstudio, and work in the Terminal tab. Before running git clone, everyone needs to ensure they are in a folder that is not inside another repo. You can place repos anywhere you want. I suggest placing them all into your home folder on edupod. You can be sure you are there by running this command (read as “cd tilde” because tilde is a shortcut for your home directory).\ncd ~\nTo be sure that you aren’t inside another repo you can run git status and you want to see a fatal error.\ngit status\nfatal: not a git repository (or any parent up to mount point /stor/home)\nStopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).\nIf you do not see the fatal error, then you need to move up in your folder hierarchy until you are not in a repo. Use cd .. or cd ~. If you still get that error and you are in your home folder, see FAQ for “I accidentally made my home folder a git repo” at Section A.2\nThe contributors will have their own github username in the fork URL. You can quickly copy that with this button on github.\n\n\n\nImage showing button that copies the URL\n\n\nThen clone your repository and change directory into it.\n\ngit clone &lt;fork_repo_url&gt;\ncd &lt;repository_name&gt;\n\n\nEstablish remotes. Contributor A and Contributor B will specify the shared repository as “upstream”.\n\n\ngit remote add upstream &lt;maintainers_repo_url&gt;\n\nIf setup properly then the git remote -v command will show four lines for Contributor A and Contributor B:\ngit remote -v\norigin  &lt;fork_repo_url&gt; (fetch)\norigin  &lt;fork_repo_url&gt; (push)\nupstream &lt;maintainers_repo_url&gt; (fetch)\nupstream &lt;maintainers_repo_url&gt; (push)\n\n\n\n\n\n\nNote\n\n\n\nNote that git automatically creates the origin remote as whatever URL was used with git clone.\n\n\nEach exercise below assumes this setup as the starting point."
  },
  {
    "objectID": "skills/github_collaboration.html#sharing-work-and-synchronizing",
    "href": "skills/github_collaboration.html#sharing-work-and-synchronizing",
    "title": "13  Github collaboration",
    "section": "13.3 Sharing work and synchronizing",
    "text": "13.3 Sharing work and synchronizing\nRequires three part repository setup as shown above in Basic forking workflow setup\nThe contributors are each going to do some work, then pass it up through their forks to the upstream shared repository. This will use git push and Github pull requests (which the Maintainer will see and approve). We will then use git pull upstream so that each contributor gets the work that the other has done.\n\nContributor A, Contributor B should create a new branch and switch to it (replace YOUR_ROLE_NAME with either contributorA or contributorB):\n\n\ngit checkout -b YOUR_ROLE_NAME-new-branch\n\n\nContributor A, Contributor B each create a file named after their role (ie contributorA.txt, contributorB.txt). You can use the Rstudio editor on edupod to create and save the file, or you can create a file with some simple content using:\n\necho \"A line of content\" &gt;&gt; YOUR_ROLE_NAME.txt\n(replace YOUR_ROLE_NAME with maintainerA or maintainerB)\n\nAdd and commit your new file.\n\n\ngit add YOUR_ROLE_NAME\ngit commit -m \"Contributing a file\"\n\n\nPush your new file. By default git push uses origin as the destination (so this new branch and file will go to your fork)\n\n\ngit push\n\n\n\n\n\n\n\nNote\n\n\n\nIf you have trouble with GitHub authentication, remember that it is the email address associated with the GitHub account and the password has to be a PAT. That is the special password you copied from the GitHub site. See Chapter 12 for details.\n\n\nYou may also see a message about having an upstream branch. Something like this:\ngit push\nfatal: The current branch test-branch has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin test-branch\nYou can re-run the command as given (copy from in Terminal).\nThe incoming contributions from Contributor A and Contributor B these files are now at their fork, and will need a Pull Request to move to the shared repo.\n\nContributor A and Contributor B go to github and look at their own fork (if you’ve forgotten the URL you can use git remote -v and look next to origin. Github knows that the fork now has material that the shared repo doesn’t, and will make a New Pull Request button available.\n\n\n\n\nImage of drop down menu for branches, shows for-pull-request and main\n\n\n\n\n\nCreate PR screen\n\n\nSince we created files with unique file names, these PRs will show up as “Able to be automatically merged”.\n\nThe Maintainer should now refresh their page (so they are looking at upstream) and they will see a number next to the Pull Request tab:\n\n\n\n\nImage showing new Pull Requests available\n\n\nThe Maintainer can accept both pull requests, which will merge files into the main branch on the shared repo.\n\n\n\n\nImage of accepting PR\n\n\n\nNow the contributors need to synchronize with the shared repo. They first have to switch to the main branch, then they can use git pull to bring the new files from the other contributor into their local repo.\n\nContributor A and Contributor B should swith to main, then pull upstream.\n\n\ngit checkout main\ngit pull upstream main\n\n\nFinally, Contributor A and Contributor B will push these new changes from the shared repo up to their forks.\n\n\ngit push\n\nI’ve always thought it is a little strange that a contributor’s fork doesn’t distribute changes from upstream, but that new work from the shared repo gets to the fork via the contributor’s local repo on their laptop. After all, github knows the fork is connected to the shared repo … but this is the roundabout way it works."
  },
  {
    "objectID": "skills/github_collaboration.html#once-more-but-with-maintainer-editing-as-well.",
    "href": "skills/github_collaboration.html#once-more-but-with-maintainer-editing-as-well.",
    "title": "13  Github collaboration",
    "section": "13.4 Once more, but with maintainer editing as well.",
    "text": "13.4 Once more, but with maintainer editing as well.\nIn the exercise above you may have noticed that the maintainer was not editing and contributing files, only ContributorA and ContributorB were.\nThe maintainer is the owner of the shared repository (which we call “upstream”). For this reason they can work directly in that repository, and they don’t need to make their own fork. The maintainer can directly use git clone on the shared repository.\n\n\n\n\n\n\nNote\n\n\n\nFor the maintainer upstream and origin are the same; The Maintainer only has one remote set up.\n\n\nThe maintainer can still create pull requests (and they should do). This places them on an equal footing with other contributors, so everyone else can follow the work and comment on it. Maintainers can make a pull request from a branch in their repository to another branch (usually main/main).\nThis gives us another insight: a Github pull request is from a branch to another branch; it doesn’t matter if those branches are in forked repos or in the same repo.\n\nMaintainer should clone the shared repo\n\ngit clone MAINTAINER_URL\nIf the maintainer then runs:\ngit remote -v\nthey will see:\norigin  MAINTAINER_URL (fetch)\norigin  MAINTAINER_URL (push)\nSo … for the maintainer (the owner of the shared repo) the shared repo on their clone is called origin, but those the maintainers (who are working through a fork) it is called upstream. This can be a little confusing. Remember that when we run git clone git automatically sets up a remote called origin.\n\nMaintainer creates a branch and changes to it:\n\ngit checkout -b new-maintainer-branch\n\nMaintainer creates and saves a file called ‘maintainer.txt’\n\nYou can do this with the same command that the Contributors used:\necho \"Content for the file\" &gt;&gt; maintainer.txt\n\nMaintainer pushes up to the shared repo. Remember: GitHub email/PAT token as password. See Chapter 12 If you see a message about --set-upstream you will also have to copy that the command in the error message to set up the branch on the remote repo.\n\ngit push\nSince the maintainer is working on a new branch, this creates a new branch on the shared repo on github.\n\nMaintainer views the new branch on github, creating a pull request.\n\nThis pull request is a request (to themselves) to bring the code from the new-maintainer-branch branch to main.\n\nContributorA and ContributorB should find the new PR (on the shared repo) and make comments (e.g., “Hey, looks good”).\nThe Maintainer should merge the branch and close the PR.\nEveryone should update their own local repo (on Rstudio). First, everyone needs to switch to main (because that is where the PRs are merged to).\n\ngit checkout main\nThen obtaining the changes, differs slightly between roles:\n\nContributors (who are working through a fork) will need to get the changes from upstream so they need to pull from upstream main, then push to their forks\n\ngit pull upstream main\ngit push\n\nThe maintainer (who cloned the shared repo) will just need git pull. They don’t need to push because the changes are already in the repo they cloned from.\n\ngit pull"
  },
  {
    "objectID": "skills/github_collaboration.html#generate-merge-conflict",
    "href": "skills/github_collaboration.html#generate-merge-conflict",
    "title": "13  Github collaboration",
    "section": "13.5 Generate merge conflict",
    "text": "13.5 Generate merge conflict\n(If starting here, confirm that your Group of three has the setup in Basic forking workflow setup as the starting point.)\nThe point of this exercise is to intentionally create conflicts in editing, to demonstrate how they show up in Pull Requests.\n\nMaintainer should change to the main branch on their local repo (on EduPod Rstudio)\n\ngit checkout main\n\nMaintainer should then create, add, commit, and push a file called animals.txt with this content:\n\nlion\ntiger\nleopard\nturtle\n\nContributor A and Contributor B should synchronize to receive this file.\n\n\ngit pull upstream main\n\n\nContributor A and Contributor B should both create and switch to a branch.\n\ngit checkout -b animal-branch-CONTRIBUTOR_NAME\n5, Contributor A and Contributor B should each edit the animals.txt file by adding their name to the first line in the animals.txt (so it reads lion contributorA or lion contributorB). They add, commit, push to their forks.\n\n\n\n\n\n\nNote\n\n\n\nNote that these edits are incompatible, so they will generate a conflict when we try to merge them below.\nThey are incompatible because git can’t automatically merge them. Git works line by line and is quite smart (able to notice the insertion of lines, for example) but some merging of work needs human attention.\n\n\n\nContributor A and Contributor B should then go to github and look at their animal-branch on their forks. They should create a pull request by hitting the ‘New Pull Request’ button. Note that the pull request’s may not say “Able to automatically merge” (but go ahead and create the PR anyway.)\nWith everyone looking at Maintainer’s computer, Maintainer should refresh the github page for the shared repository and will see two pull-requests in the pull-request tab.\n\nThe maintainer should merge contributorA’s branch. This should merge cleanly since contributorA directly edited the lion line that the maintainer wrote.\nHowever, the second pull request will create a merge conflict. So the maintainer will have to resolve the conflict.\n\n\n\nViewing a PR on GitHub that will not merge cleanly, simple fixes can be applied via Resolve Conflicts button highlighted in purple\n\n\n\n13.5.1 Resolving merge conflict\nFor small edits like this, we can edit the file on the github website.\nThe maintainer can choose whatever contributions they want:\n\nthe original line\nthe line from ContributorA\nthe line from ContributorB\nBoth lines\nAny other decision they make\n\nTo show a conflict, git inserts special lines into the file, using these characters: &lt;&lt;&lt;&lt;&lt; ======== and &gt;&gt;&gt;&gt;&gt;&gt; While those are present, git will not let us continue.\n\n\n\n\n\n\nNote\n\n\n\nThis way of showing a comparison between files is called a diff. You can read more about diffs. e.g., A tutorial on diff and diff format\n\n\nTo resolve the conflict we have to remove those lines. As long as they are gone, git will accept whatever is in the file as the new desired state. Git is only working at the syntax level, it does not check the semantics of the file (e.g., whether the code runs, or whether the resulting document is readable or logically consistent.)\nThe maintainer should see the file marked with a conflict like:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nlion contributorA\n=======\nlion contributorB\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; animal-branch-contributorB\ntiger\nleopard\nturtle\nWe can read this as follows:\n\nThe code in HEAD has “contributorA” next to lion. But the code in animal-branch-contributorB has conflicting code for that line, showing “contributorB” next to line.\n\nThe maintainer should go ahead and remove the &lt;&lt;&lt;&lt;&lt; ======== and &gt;&gt;&gt;&gt;&gt;&gt; lines, then save the file.\nTo let git know we are done resolving a conflict we need to then git add and git commit that file. If we are editing on GitHub that is done automatically for us.\n\nEach person should then synchronize their local repos.\n\nFor the Maintainer that just means git pull (since they have a direct clone of upstream).\nFor Contributor B and Contributor A they have to first get the changes in upstream, then push them to their fork.\n\ngit pull upstream main\ngit push"
  },
  {
    "objectID": "skills/github_collaboration.html#deleting-branches",
    "href": "skills/github_collaboration.html#deleting-branches",
    "title": "13  Github collaboration",
    "section": "13.6 Deleting branches",
    "text": "13.6 Deleting branches\nWe have been using branches as temporary working areas, intended to be used, merged, and then deleted. Later we will discuss longer lived branches (such as a staging or dev branch).\nFor short lived branches, though, we usually want to delete them when they are merged. GitHub offers that as an option after a PR is accepted.\nWe can also delete a branch on our local repo, then push that change up to GitHub.\ngit branch -d localBranchName\ngit push\nOr we can do this with a single command:\ngit push origin --delete remoteBranchName\nThe maintainers should go ahead and delete their branches, push to GitHub and make sure that they are gone from the fork. Note that we don’t need to delete the contributor’s branches from upstream because they never went there (the PR asked to bring the changes on the branches directly into the main branch on the shared repo)."
  },
  {
    "objectID": "skills/github_collaboration.html#exercises",
    "href": "skills/github_collaboration.html#exercises",
    "title": "13  Github collaboration",
    "section": "13.7 Exercises",
    "text": "13.7 Exercises\n\nRotate your group, repeating the animals conflict exercise. When you change maintainer you will need to repeat the repository set up (use entirely new repos on GitHub). Use edits to different lines in the animals file.\nExperiment to find out what happens when a contributor adds additional commits to a branch on their fork, after they have opened a PR.\nExperiment to find out what happens if contributors don’t synchronize their local repo after having their PR accepted."
  },
  {
    "objectID": "skills/git_cherrypick_split_pr.html#split-before-submit",
    "href": "skills/git_cherrypick_split_pr.html#split-before-submit",
    "title": "14  Split a Pull Request",
    "section": "14.1 Split before submit",
    "text": "14.1 Split before submit\nThings would be better if you had created a new branch for the first set of commits, then a second branch for your second set of commits, never adding either set to your main branch and following the “always work on a (short-lived) feature branch” rule. Then each set of commits would be “sent” through a different pull request.\nIn other words we would be in good position to submit two separate pull requests:\n\n\n\n\ngitGraph\n  commit id: \"main1\"\n  commit id: \"main2\"\n  commit id: \"branch here\" type: HIGHLIGHT\n  branch first_set\n  commit id: \"apple1\"\n  commit id: \"apple2\"\n  checkout main\n  branch second_set\n  commit id: \"orange1\"\n  commit id: \"orange2\"\n\n\n\n\n\nBut instead we have everything mixed up together on one branch.\n\n\n\n\ngitGraph\n  commit id: \"main1\"\n  commit id: \"main2\"\n  commit id: \"branch here\" type: HIGHLIGHT\n  branch all_mixed_up\n  commit id: \"apple1\"\n  commit id: \"orange1\"\n  commit id: \"apple2\"\n  commit id: \"orange2\"\n\n\n\n\n\nWe might have forgotten to branch at all, and so have everything stuck on main\n\n\n\n\ngitGraph\n  commit id: \"main1\"\n  commit id: \"main2\"\n  commit id: \"branch here\" type: HIGHLIGHT\n  commit id: \"apple1\"\n  commit id: \"orange1\"\n  commit id: \"apple2\"\n  commit id: \"orange2\"\n\n\n\n\n\n\n14.1.1 LearnGitBranching exercise\nWe can see an example of the overall workflow for splitting a PR using the LearnGitBranching Visualizer, I have created a level called Split Pull Request.\n\n\n14.1.2 Cherry-pick via commandline git\nYou can see a situation like this in this repo on GitHub. Bring that to your working space with:\ncd ~\ngit clone https://github.com/jameshowison/i320d-needs-split.git\ncd i320d-needs-split\nIf you then run our gitviz command (see Section A.3 for how to set up a short cut for that)\nYou will see both our apple and orange edits all together on the main branch.\njlh5498@educcomp04:~/github_repos/i320d-needs-split$ git log --oneline --abbrev-commit --all --graph --decorate --color\n* c70df5a (HEAD -&gt; main) orange2\n* 423ad05 apple2\n* 4f1fe99 orange1\n* 91abdfb apple1\n* 8e35b12 branch here\n* ea4d580 main1\n* 252ff3f Initial commit\nWe eventually want this to look like our first graph above, with two new branches (apple_branch and orange_branch):\njlh5498@educcomp04:~/github_repos/i320d-needs-split$ git log --oneline --abbrev-commit --all --graph --decorate --color\n* 09d5482 (HEAD -&gt; orange_branch) orange2\n* 2137500 orange1\n| * c8fd64d (apple_branch) apple2\n| * 1a5ac49 apple1\n|/  \n* 158f2c4 (main) branch here\n* 96d65c3 main2\n* 7036c11 main 1\n* 252ff3f Initial commit\nTo get there we will take three steps:\n\nCreate a new branch, specifying the starting point\nMove the relevant commits to the new branch\nPush to the fork, create a new pull request\n\ngit checkout -b apple_branch 8e35b12\nThe 8e35b12 here is the commit id of the point at which we want the branch to start. Until now when we’ve created a branch we have done so while sitting at HEAD but git allows us to create a branch back in time. Git does this by adding metadata to the earlier commit (labeling it with a branch label).\nThen we can move the commits using git cherry-pick. Note that this doesn’t move them from the main branch, but creates new commits with the same content. This is very much like copying files from one directory into another directory (except we are moving commits from a branch to another branch).\ngit cherry-pick 91abdfb 423ad05\nAgain the strings 91abdfb and 423ad05 identify specific commits. We can provide a list (like above), just one, and it is also possible to provide a range if you want a full sequence of commits.\nAfter the cherry-pick we see:\njlh5498@educcomp04:~/github_repos/i320d-needs-split$ git cherry-pick 91abdfb 423ad05\n[apple_branch 9ca623a] apple1\n Date: Wed Mar 1 15:31:38 2023 -0600\n 1 file changed, 1 insertion(+)\n[apple_branch 2b82f41] apple2\n Date: Wed Mar 1 15:31:38 2023 -0600\n 1 file changed, 1 insertion(+)\njlh5498@educcomp04:~/github_repos/i320d-needs-split$ git log --oneline --abbrev-commit --all --graph --decorate --color\n* 2b82f41 (HEAD -&gt; apple_branch) apple2\n* 9ca623a apple1\n| * c70df5a (origin/main, origin/HEAD, main) orange2\n| * 423ad05 apple2\n| * 4f1fe99 orange1\n| * 91abdfb apple1\n|/  \n* 8e35b12 branch here\n* ea4d580 main1\n* 252ff3f Initial commit\nWe can then use git push as normal to push the apple_branch up to the fork and make a pull request.\n\n\n\n\n\n\nNote\n\n\n\nMoving around commits using cherry-pick shows us why it is so important to understand commits as full copies of the state of the working directory, as full snapshots of our files. If commits were just the changes (just a bunch of diffs) then we would have to apply them in the order they were created, otherwise we’d get nonsense results.\nBut because commits are full copies of everything, we can move them around without any logical problems. Think of reordering the trays with the paper planes we used in the first class.\nIn fact, all that git is doing is re-writing the parent for each commit.\nAnd branches are just like little post-its added to some commits, they are just metadata pointers. Neat, isn’t it?\nSee more about this on the GitHub blog https://github.blog/2020-12-17-commits-are-snapshots-not-diffs/\n\n\n\n\n14.1.3 Exercises\n\n14.1.3.1 Individual Exercises\n\nNow you work to get the orange_branch organized.\n\n\n\n14.1.3.2 Group Exercise\nGroups of 3. Nominate Maintainer, Contributor A, and Contributor B.\n\nMaintainer creates a repo on Github.\nMaintainer adds 2 commits and pushes.\nContributor A and Contributor B fork and clone (and add upstream).\nContributor A and Contributor B create a feature branch called `will_need_split.\nContributor A and Contributor B add four commits of four files on will_need_split\nContributor A and Contributor B create a pull request to upstream from their will_need_split branch (including all four commits).\nMaintainer rejects the pull request, closing it and commenting “please split this up” (and direct which files go together, probably 2 in each.)\nContributor A and Contributor B follow procedure above to end up with two new branches split_branch_1 and split_branch_2 send through separate pull requests with only the right commits/files in them.\nMaintainer eventually accepts each of the four split up pull requests."
  },
  {
    "objectID": "skills/skills_faq.html#git-issues",
    "href": "skills/skills_faq.html#git-issues",
    "title": "Appendix A — Skills faq",
    "section": "A.1 git issues",
    "text": "A.1 git issues\n\nA.1.1 Set my name and email\ngit wants to add your name and email to commits. These are distinct from your github account (remember git can be used independently of an online service or with online services other than github).\nIf you are seeing messages that end like this:\nYou can suppress this message by setting them explicitly. Run the\nfollowing command and follow the instructions in your editor to edit\nyour configuration file:\n\n    git config --global --edit\n\nAfter doing this, you may fix the identity used for this commit with:\n\n    git commit --amend --reset-author\nThen you can run these commands to set a username and email. Note that these can be anything, they aren’t a login or checked against anything, they are just metadata attached to your commits. Nonetheless having them make sense for your identity makes sense when sharing code publically. They can easily be a made up identifier (pseudonym/handle/accountname).\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n\n\nA.1.2 Password pop-up repeats too often\nThe username/password pop-up can come up too often. Especially with GitHub requiring a PAT (and not the same password used on the website) this can be a hassle, since the PAT is not configurable and has to be copy/pasted.\nRstudio is generating that pop-up, but the frequency is controlled by a gitconfig variable. The default without configuration is 15m so if we don’t run a git command for 15m it expires the cache and pops up again. We can make it show up less with:\ngit config --global credential.helper 'cache --timeout=10000000'\nThat means that the cache won’t expire for 10,000,000 seconds (which is 16 weeks).\nThanks to https://happygitwithr.com/https-pat.html#store-credentials-through-organic-git-use and the Rstudio community forums for helping me with that https://community.rstudio.com/t/git-user-pass-pop-ups-when-using-git-in-terminal-window/161213\n\n\nA.1.3 git commit throws me into a weird mode\nIf you type git commit just on its own rather than git commit -m \"Some message\" you will see something like this:\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# On branch master\n# Your branch is up to date with 'origin/master'.\ngit needs a commit message. When you don’t provide one it throws you into a text editor, expecting you to type a small novel.\nThe editor that you go into by default is the vi or vim editor. It can be confusing because it has multiple modes (ie typing doesn’t always just produce text).\nThe best option is to:\n\nHit esc twice: Esc Esc\n\nType :q! and hit Enter\nRedo your commit using `git commit -m “Some message”\n\nSee https://stackoverflow.com/questions/11828270/how-do-i-exit-vim\nThe option below does not work in Rstudio because Rstudio captures the Ctrl key commands\nYou can also configure git to use another editor: https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-editing-commit-messages\nFor example, the nano editor is easier to use. You can set that run running\ngit config --global core.editor \"nano\"\nIn nano we can type a commit message as usual. The bottom of the screen shows commands. Nano uses the ^ symbol to represent the Ctrl key. We have to save the file and then exit Nano. So to save the message and return to the commandline we use:\nCtrl + O\nThen:\nCtrl + X"
  },
  {
    "objectID": "skills/skills_faq.html#sec-faq-home-git-folder",
    "href": "skills/skills_faq.html#sec-faq-home-git-folder",
    "title": "Appendix A — Skills faq",
    "section": "A.2 I accidentally made my home folder a git repo",
    "text": "A.2 I accidentally made my home folder a git repo\nIf you are in your home folder but git status doesn’t give a “fatal error” then you’ve accidentially made your home folder into a git repository (probably by running git init in that folder).\nIn this case we need to undo this. We can’t delete our home folder, because it has everything else inside it. We have to somehow tell the computer that the home folder should not be a git repo. Happily, then only thing that makes it a git repo is that it has a .git folder inside it. You can confirm by running:\nls -lah\nThe -a flag to ls makes it show all files and folders, even the hidden ones that start with a dot.\nTo fix this we could just delete the .git folder but we might lose data that way (if we had already added work to that repo). So safest thing is to make a new folder inside our home folder, and then move the .git there.\nmkdir backup_home_git\nmv ./.git ./backup_home_git\nNow you could cd backup_home_git and use that folder as a git repo. But probably you are about to clone from github (in which case a new folder will be created) or you are about to use git init to create a new local repo (in which case you should create a folder first, cd into it, then run git init."
  },
  {
    "objectID": "skills/skills_faq.html#sec-gitviz",
    "href": "skills/skills_faq.html#sec-gitviz",
    "title": "Appendix A — Skills faq",
    "section": "A.3 Vizualizing git trees (aka gitviz)",
    "text": "A.3 Vizualizing git trees (aka gitviz)\nIn this course we are using a command that I usually call “gitviz” for short:\ngit log --oneline --abbrev-commit --all --graph --decorate --color\nThis produces reasonably readable graphs (especially for the teaching repos used in this course).\nThey look like this:\njlh5498@educcomp04:~/github_repos/i320_test3$ git log --oneline --abbrev-commit --all --graph --decorate --color\n*   d8ab2c1 (HEAD -&gt; main, origin/main, origin/HEAD) Merge pull request #1 from jameshowison/new-feature\n|\\  \n| * ffb601d (origin/new-feature, new-feature) added extra\n|/  \n* f256ee7 Added line to README\n* 093fb0c Initial commit\nOr as an image (with coloring as on Edupod Rstudio):\n\n\n\nImage showing output of gitviz command shown as text above\n\n\nYou can read a little more about how to read these graphs here https://stackoverflow.com/questions/22313343/git-graph-what-do-the-lines-and-asteriks-denote\nLong story short:\n\nThe asterisk characters (*) show a single commit\nThe lines formed with characters like (| \\ /) help us follow which branches a commit was on.\nThe words in parens show branch names, and can include the names of remotes (e.g., origin/new-feature means the new-feature branch on the origin remote)\n\nIt is a long command, so you can either keep it handy in a pastebin (I use Typinator) or you can register it as a command alias for git itself:\ngit config --global alias.viz 'log --oneline --abbrev-commit --all --graph --decorate --color'\nSo then you can just type:\ngit viz"
  },
  {
    "objectID": "skills/skills_faq.html#seeing-a-merge-conflict-using-git-log",
    "href": "skills/skills_faq.html#seeing-a-merge-conflict-using-git-log",
    "title": "Appendix A — Skills faq",
    "section": "A.4 Seeing a merge conflict using git log",
    "text": "A.4 Seeing a merge conflict using git log\nIn one assignment students have to submit a repo showing a resolved merge conflict when accepting a PR. This raised the question of whether I could see this looking at the repo. Student questions helped me figure that our, leading me to https://stackoverflow.com/questions/15277708/how-do-you-see-show-a-git-merge-conflict-resolution-that-was-done-given-a-mer which highlighted this as an issue in presenting merge conflicts for review. The most recent answer, led me to discover a new feature in git\ngit log --remerge-diff\nThis enables one to see the files with the &lt;&lt;&lt;&lt;&lt;&lt; type conflict markers shown.\n\nrm -rf merge-conflict-example\ngit clone https://github.com/jameshowison/merge-conflict-example.git\ncd merge-conflict-example\ngit log -1 --skip 1 --remerge-diff\n## Cloning into 'merge-conflict-example'...\n## commit 50911dc2232965238790ad8ca3fdcabe56b41639\n## Merge: 57c1c6c 99b328f\n## Author: pablo-carbajo1 &lt;99198265+pablo-carbajo1@users.noreply.github.com&gt;\n## Date:   Thu Mar 2 18:06:57 2023 -0600\n## \n##     Merge branch 'main' into patch-1\n## \n## diff --git a/animals.txt b/animals.txt\n## remerge CONFLICT (content): Merge conflict in animals.txt\n## index f9970b6..f07b36e 100644\n## --- a/animals.txt\n## +++ b/animals.txt\n## @@ -1,8 +1,5 @@\n## -&lt;&lt;&lt;&lt;&lt;&lt;&lt; 57c1c6c (Update animals.txt)\n##  lion Contributor B\n## -=======\n##  lion contributor A\n## -&gt;&gt;&gt;&gt;&gt;&gt;&gt; 99b328f (Merge pull request #4 from lisahyuniko/patch-1)\n##  tiger \n##  leopard \n##  turtle"
  }
]